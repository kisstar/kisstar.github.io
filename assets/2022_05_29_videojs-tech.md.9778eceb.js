import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.0f749972.js";const p="/images/video/videojs/videojs-tech.png",g=JSON.parse('{"title":"Video.js Tech","description":"","frontmatter":{"thumbnail":"/images/video/videojs/videojs-logger.png","title":"Video.js Tech","summary":"在 Video.js 中，播放技术是指用于播放视频或音频的特定浏览器或插件技术。","author":"Kisstar","location":"北京","date":"2022-05-29T00:00:00.000Z","tags":["Video","Video.js"]},"headers":[],"relativePath":"2022/05/29/videojs-tech.md","filePath":"posts/video/2022-05-29-videojs-tech.md","lastUpdated":1699069026000}'),e={name:"2022/05/29/videojs-tech.md"},o=l('<img style="width:100%;height:350px;" src="'+p+`" alt="Videojs Tech"><p>Video.js 本身是一个提供了 UI 等交互能力的简易播放器，它支持基本的视频和音频播放能力，并确保它们在不同的播放技术中工作一致。</p><p>播放技术是指用于播放视频或音频的特定浏览器或插件技术，该技术包括一个 API 包装器，用于在 Video.js 控件和 API 之间转换，以使用特定播放技术的能力。</p><p>使用 HTML5 时，播放技术是 <code>video</code> 或 <code>audio</code> 元素。使用 <code>videojs-youtube</code> 技术时，播放技术是 YouTube 播放器。</p><h2 id="adding-playback-technology" tabindex="-1">Adding Playback Technology <a class="header-anchor" href="#adding-playback-technology" aria-label="Permalink to &quot;Adding Playback Technology&quot;">​</a></h2><p>当添加新的播放技术后，它们会自动添加到 techOrder 中。您可以通过修改配置项 techOrder 来更改每个技术的优先级。</p><p>通常修改的方式包括两种，一是通过标签配置：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">video</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">data-setup</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&#39;{&quot;techOrder&quot;: [&quot;html5&quot;, &quot;other supported tech&quot;]}&#39;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">video</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">video</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">data-setup</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&#39;{&quot;techOrder&quot;: [&quot;html5&quot;, &quot;other supported tech&quot;]}&#39;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">video</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>另一种则是通过脚本进行配置：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">videojs</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;videoID&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  techOrder: [</span><span style="color:#9ECBFF;">&#39;html5&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;other supported tech&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">videojs</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;videoID&#39;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">  techOrder: [</span><span style="color:#032F62;">&#39;html5&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;other supported tech&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><h2 id="building-an-api-wrapper" tabindex="-1">Building an API Wrapper <a class="header-anchor" href="#building-an-api-wrapper" aria-label="Permalink to &quot;Building an API Wrapper&quot;">​</a></h2><p>如果想要创建一个新的播放技术，可以参考 Video.js 的源代码，理解 HTML5 API 包装器是如何创建的。</p><p>总的来说，它包括一些方法和事件，其中一部分是必须的。</p><h3 id="required-methods" tabindex="-1">Required Methods <a class="header-anchor" href="#required-methods" aria-label="Permalink to &quot;Required Methods&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyTech</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> videojs.</span><span style="color:#B392F0;">getComponent</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Tech&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   * Called by </span><span style="color:#B392F0;">{</span><span style="color:#F97583;">@link</span><span style="color:#B392F0;"> </span><span style="color:#E1E4E8;">Player#play</span><span style="color:#B392F0;">}</span><span style="color:#6A737D;"> to play using the \`MyTech\` \`Tech\`.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">play</span><span style="color:#E1E4E8;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   * Called by </span><span style="color:#B392F0;">{</span><span style="color:#F97583;">@link</span><span style="color:#B392F0;"> </span><span style="color:#E1E4E8;">Player#pause</span><span style="color:#B392F0;">}</span><span style="color:#6A737D;"> to pause using the \`MyTech\` \`Tech\`.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">pause</span><span style="color:#E1E4E8;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   * Get the current playback time in seconds</span></span>
<span class="line"><span style="color:#6A737D;">   *</span></span>
<span class="line"><span style="color:#6A737D;">   * </span><span style="color:#F97583;">@return</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{number}</span></span>
<span class="line"><span style="color:#6A737D;">   *         The current time of playback in seconds.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">currentTime</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// when seeking make the reported time keep up with the requested time</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// by reading the time we&#39;re seeking to</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   * Get the value of \`volume\` from the media element. \`volume\` indicates</span></span>
<span class="line"><span style="color:#6A737D;">   * the current playback volume of audio for a media. \`volume\` will be a value from 0</span></span>
<span class="line"><span style="color:#6A737D;">   * (silent) to 1 (loudest and default).</span></span>
<span class="line"><span style="color:#6A737D;">   *</span></span>
<span class="line"><span style="color:#6A737D;">   * </span><span style="color:#F97583;">@return</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{number}</span></span>
<span class="line"><span style="color:#6A737D;">   *         The value of \`volume\` from the media element. Value will be between 0-1.</span></span>
<span class="line"><span style="color:#6A737D;">   *</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">volume</span><span style="color:#E1E4E8;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   * Get the total duration of the current media.</span></span>
<span class="line"><span style="color:#6A737D;">   *</span></span>
<span class="line"><span style="color:#6A737D;">   * </span><span style="color:#F97583;">@return</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{number}</span></span>
<span class="line"><span style="color:#6A737D;">   8          The total duration of the current media.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">duration</span><span style="color:#E1E4E8;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   * Get and create a \`TimeRange\` object for buffering.</span></span>
<span class="line"><span style="color:#6A737D;">   *</span></span>
<span class="line"><span style="color:#6A737D;">   * </span><span style="color:#F97583;">@return</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{TimeRange}</span></span>
<span class="line"><span style="color:#6A737D;">   *         The time range object that was created.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">buffered</span><span style="color:#E1E4E8;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   * Check if fullscreen is supported on the current playback device.</span></span>
<span class="line"><span style="color:#6A737D;">   *</span></span>
<span class="line"><span style="color:#6A737D;">   * </span><span style="color:#F97583;">@return</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{boolean}</span></span>
<span class="line"><span style="color:#6A737D;">   *         - True if fullscreen is supported.</span></span>
<span class="line"><span style="color:#6A737D;">   *         - False if fullscreen is not supported.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">supportsFullScreen</span><span style="color:#E1E4E8;">() {}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Check if the tech can support the given type</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{string}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">type</span></span>
<span class="line"><span style="color:#6A737D;"> *        The mimetype to check</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@return</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{string}</span><span style="color:#6A737D;"> &#39;probably&#39;, &#39;maybe&#39;, or &#39;&#39; (empty string)</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#E1E4E8;">MyTech.</span><span style="color:#B392F0;">canPlayType</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">canPlayType</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">type</span><span style="color:#E1E4E8;">) {};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyTech</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> videojs.</span><span style="color:#6F42C1;">getComponent</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Tech&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   * Called by </span><span style="color:#6F42C1;">{</span><span style="color:#D73A49;">@link</span><span style="color:#6F42C1;"> </span><span style="color:#24292E;">Player#play</span><span style="color:#6F42C1;">}</span><span style="color:#6A737D;"> to play using the \`MyTech\` \`Tech\`.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">play</span><span style="color:#24292E;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   * Called by </span><span style="color:#6F42C1;">{</span><span style="color:#D73A49;">@link</span><span style="color:#6F42C1;"> </span><span style="color:#24292E;">Player#pause</span><span style="color:#6F42C1;">}</span><span style="color:#6A737D;"> to pause using the \`MyTech\` \`Tech\`.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">pause</span><span style="color:#24292E;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   * Get the current playback time in seconds</span></span>
<span class="line"><span style="color:#6A737D;">   *</span></span>
<span class="line"><span style="color:#6A737D;">   * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{number}</span></span>
<span class="line"><span style="color:#6A737D;">   *         The current time of playback in seconds.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">currentTime</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// when seeking make the reported time keep up with the requested time</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// by reading the time we&#39;re seeking to</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   * Get the value of \`volume\` from the media element. \`volume\` indicates</span></span>
<span class="line"><span style="color:#6A737D;">   * the current playback volume of audio for a media. \`volume\` will be a value from 0</span></span>
<span class="line"><span style="color:#6A737D;">   * (silent) to 1 (loudest and default).</span></span>
<span class="line"><span style="color:#6A737D;">   *</span></span>
<span class="line"><span style="color:#6A737D;">   * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{number}</span></span>
<span class="line"><span style="color:#6A737D;">   *         The value of \`volume\` from the media element. Value will be between 0-1.</span></span>
<span class="line"><span style="color:#6A737D;">   *</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">volume</span><span style="color:#24292E;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   * Get the total duration of the current media.</span></span>
<span class="line"><span style="color:#6A737D;">   *</span></span>
<span class="line"><span style="color:#6A737D;">   * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{number}</span></span>
<span class="line"><span style="color:#6A737D;">   8          The total duration of the current media.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">duration</span><span style="color:#24292E;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   * Get and create a \`TimeRange\` object for buffering.</span></span>
<span class="line"><span style="color:#6A737D;">   *</span></span>
<span class="line"><span style="color:#6A737D;">   * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{TimeRange}</span></span>
<span class="line"><span style="color:#6A737D;">   *         The time range object that was created.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">buffered</span><span style="color:#24292E;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   * Check if fullscreen is supported on the current playback device.</span></span>
<span class="line"><span style="color:#6A737D;">   *</span></span>
<span class="line"><span style="color:#6A737D;">   * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{boolean}</span></span>
<span class="line"><span style="color:#6A737D;">   *         - True if fullscreen is supported.</span></span>
<span class="line"><span style="color:#6A737D;">   *         - False if fullscreen is not supported.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">supportsFullScreen</span><span style="color:#24292E;">() {}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Check if the tech can support the given type</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{string}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">type</span></span>
<span class="line"><span style="color:#6A737D;"> *        The mimetype to check</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{string}</span><span style="color:#6A737D;"> &#39;probably&#39;, &#39;maybe&#39;, or &#39;&#39; (empty string)</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">MyTech.</span><span style="color:#6F42C1;">canPlayType</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">canPlayType</span><span style="color:#24292E;">(</span><span style="color:#E36209;">type</span><span style="color:#24292E;">) {};</span></span></code></pre></div><h3 id="required-events" tabindex="-1">Required Events <a class="header-anchor" href="#required-events" aria-label="Permalink to &quot;Required Events&quot;">​</a></h3><table><thead><tr><th style="text-align:left;">name</th><th style="text-align:left;">desc</th></tr></thead><tbody><tr><td style="text-align:left;">loadstart</td><td style="text-align:left;">开始加载资源。</td></tr><tr><td style="text-align:left;">play</td><td style="text-align:left;">当 paused 属性由 true 转换为 false 时触发 play 事件</td></tr><tr><td style="text-align:left;">pause</td><td style="text-align:left;">当 paused 属性由 false 转换为 true 时触发 play 事件</td></tr><tr><td style="text-align:left;">playing</td><td style="text-align:left;">播放事件在首次开始播放后以及每次重新启动时触发。</td></tr><tr><td style="text-align:left;">ended</td><td style="text-align:left;">在播放结束时触发</td></tr><tr><td style="text-align:left;">volumechange</td><td style="text-align:left;">在音量发生改变时触发</td></tr><tr><td style="text-align:left;">durationchange</td><td style="text-align:left;">在时长属性更新时被触发</td></tr><tr><td style="text-align:left;">error</td><td style="text-align:left;">播放器出错时触发。</td></tr></tbody></table><h3 id="optional-events-include-if-supported" tabindex="-1">Optional Events (include if supported) <a class="header-anchor" href="#optional-events-include-if-supported" aria-label="Permalink to &quot;Optional Events (include if supported)&quot;">​</a></h3><table><thead><tr><th style="text-align:left;">name</th><th style="text-align:left;">desc</th></tr></thead><tbody><tr><td style="text-align:left;">timeupdate</td><td style="text-align:left;">当 currentTime 属性发生改变时触发。</td></tr><tr><td style="text-align:left;">enterFullScreen</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">exitFullScreen</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">progress</td><td style="text-align:left;">在浏览器加载资源时周期性地触发。</td></tr></tbody></table><h2 id="posters" tabindex="-1">Posters <a class="header-anchor" href="#posters" aria-label="Permalink to &quot;Posters&quot;">​</a></h2><p>默认情况下，Tech 必须处理自己的 Poster，并且在一定程度上被排除在播放器的 Poster 生命周期之外。</p><p>然而，当播放器使用 techCanOverridePoster 选项初始化时，Tech 将有可能集成到该生命周期中，并使用播放器的后期图像组件。</p><p>Tech 可以通过检查选项中的 canOverridePoster 布尔值来检查他们是否具有此功能。</p><p>对于 techCanOverridePoster 的要求：</p><ul><li><code>poster()</code> 返回 Tech 当前的 Poster URL；</li><li><code>setPoster()</code> 更新 Tech 的 Poster 的 URL，并触发播放器将处理的 <code>posterchange</code> 事件。</li></ul><h2 id="technology-ordering" tabindex="-1">Technology Ordering <a class="header-anchor" href="#technology-ordering" aria-label="Permalink to &quot;Technology Ordering&quot;">​</a></h2><p>当给 Video.js 提供一系列资源地址时，要使用哪个资源取决于找到第一个支持的资源/技术组合。将按照 techOrder 中指定的顺序查询每个 tech 是否可以播放第一个源。</p><p>如果没 Tech 可以播放第一个源，那么将测试下一个源。正确设置每个源的类型对于该测试的准确性非常重要。</p><p>例如，给定以下视频元素，假设 <code>videojs-flash</code> 技术和 <code>videojs-contrib-hls</code> 源处理程序可用：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!-- &quot;techOrder&quot;: [&quot;html5&quot;, &quot;flash&quot;] --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">video</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">&lt;source</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;http://your.static.provider.net/path/to/video.m3u8&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;application/x-mpegURL&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">/</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">source</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;http://your.static.provider.net/path/to/video.mp4&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;video/mp4&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">video</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- &quot;techOrder&quot;: [&quot;html5&quot;, &quot;flash&quot;] --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">video</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;font-style:italic;">&lt;source</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;http://your.static.provider.net/path/to/video.m3u8&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;application/x-mpegURL&quot;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">/</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">source</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;http://your.static.provider.net/path/to/video.mp4&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;video/mp4&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">video</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><ul><li>Safari 可以在标准 HTML5 视频元素中播放 HLS，因此 HLS 将使用 HTML5 技术播放；</li><li>Chrome 无法单独在标准 HTML5 视频元素中播放 HLS，但 <code>videojs-contrib-hls</code> 源处理程序可以通过 HTML5 中的媒体源扩展播放 HLS。因此 HLS 将在 HTML5 技术中发挥作用;</li><li>IE 10 无法在本地播放 HLS，并且不支持媒体源扩展。由于源代码无法在 HTML5 中播放，因此可以测试 Flash 技术。<code>videojs-contrib-hls</code> 源处理程序可以在 Flash tech 中播放 HLS，因此 HLS 将在 Flash tech 中播放。</li></ul><p>现在，使用 <code>videojs-contrib-hls</code>，但不使用 <code>videojs-flash</code>，再次获取相同的来源：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!-- &quot;techOrder&quot;: [&quot;html5&quot;] --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">video</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">&lt;source</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;http://your.static.provider.net/path/to/video.m3u8&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;application/x-mpegURL&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">/</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">source</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;http://your.static.provider.net/path/to/video.mp4&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;video/mp4&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">video</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- &quot;techOrder&quot;: [&quot;html5&quot;] --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">video</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;font-style:italic;">&lt;source</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;http://your.static.provider.net/path/to/video.m3u8&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;application/x-mpegURL&quot;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">/</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">source</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;http://your.static.provider.net/path/to/video.mp4&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;video/mp4&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">video</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><ul><li>Safari 将在 HTML5 技术中播放 HLS；</li><li>Chrome 将通过 <code>videojs-contrib-hls</code> 在 HTML5 技术中播放 HLS；</li><li>IE 10 不能在 HTML5 或 Flash 技术中播放 HLS。接下来将测试 MP4 源代码。MP4 可以由 HTML5 播放，因此将使用 HTML5 技术播放 MP4；</li></ul><p>依旧是统一的源，这一次我们有 <code>videojs-flash</code>，但没有 <code>videojs-contrib-hls</code>：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!-- &quot;techOrder&quot;: [&quot;html5&quot;, &quot;flash&quot;] --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">video</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">&lt;source</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;http://your.static.provider.net/path/to/video.m3u8&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;application/x-mpegURL&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">/</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">source</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;http://your.static.provider.net/path/to/video.mp4&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;video/mp4&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">video</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- &quot;techOrder&quot;: [&quot;html5&quot;, &quot;flash&quot;] --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">video</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;font-style:italic;">&lt;source</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;http://your.static.provider.net/path/to/video.m3u8&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;application/x-mpegURL&quot;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">/</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">source</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;http://your.static.provider.net/path/to/video.mp4&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;video/mp4&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">video</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><ul><li>Safari 将在 HTML5 技术中播放 HLS；</li><li>Chrome 无法在 HTML5 或 Flash 技术中播放 HLS，因此将在 HTML5 技术中播放 MP4；</li><li>IE 10 也不能在 HTML5 或 Flash 技术中播放 HLS，也将在 HTML5 技术中播放 MP4。</li></ul><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://docs.videojs.com/tutorial-tech_.html" target="_blank" rel="noreferrer">Tutorial: tech | Video.js Documentation</a></li></ul>`,39),t=[o];function c(r,y,i,E,d,u){return n(),a("div",null,t)}const A=s(e,[["render",c]]);export{g as __pageData,A as default};
