import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.e9126b17.js";const p="/images/git/git-lint-custom.png",o="/images/git/lint-flow.png",e="/images/git/lint-cli.png",F=JSON.parse('{"title":"如何定制化提交信息","description":"","frontmatter":{"thumbnail":"/images/git/git-lint-custom.png","title":"如何定制化提交信息","summary":"友好的提交信息对于团队协作而言非常重要，在实际的使用当中，各个团体的提交规范很可能存在差异，为了适应不同场景需要对规范进行一些定制化处理。","author":"Kisstar","location":"北京","date":"2022-07-31T00:00:00.000Z","categoryKeys":["freebie"],"tagKeys":["git"],"outline":"deep"},"headers":[],"relativePath":"2022/07/31/commitlint-custom.md","filePath":"posts/git/2022-07-31-commitlint-custom.md","lastUpdated":1717856258000}'),t={name:"2022/07/31/commitlint-custom.md"},c=l('<p><img style="width:100%;height:350px;box-shadow:rgba(0, 0, 0, 0.1) -4px 9px 25px -6px;" src="'+p+`" alt="git"></p><p>友好的提交信息对于团队协作而言非常重要，开源社区已经为我们总结出了一种用于给提交信息增加人机可读含义的 <a href="https://www.conventionalcommits.org/en/v1.0.0/" target="_blank" rel="noreferrer">Conventional Commits</a> 规范，同时配套有交互式提交工具 <a href="https://github.com/commitizen/cz-cli" target="_blank" rel="noreferrer">commitizen</a> 和校验工具 <a href="https://github.com/conventional-changelog/commitlint" target="_blank" rel="noreferrer">commitlint</a>。</p><p>在实际的使用当中，各个团体的提交规范很可能存在差异，所以为了适应不同的需要我们需要针对交互式提交和校验规则进行一定程度的定制，好在二者都提供了相应的支持。</p><h2 id="扩展-adapter" tabindex="-1">扩展 Adapter <a class="header-anchor" href="#扩展-adapter" aria-label="Permalink to &quot;扩展 Adapter&quot;">​</a></h2><p>社区中已经提供了一些 Adapter，如果你没有找到合适的，那么就可以通过其中的 <a href="https://github.com/leoforfree/cz-customizable" target="_blank" rel="noreferrer">cz-customizable</a> 来自定义交互时的行为。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 安装</span></span>
<span class="line"><span style="color:#B392F0;">yarn</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-D</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cz-customizable</span></span>
<span class="line"><span style="color:#6A737D;"># Peer Dependencies: commitizen</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 安装</span></span>
<span class="line"><span style="color:#6F42C1;">yarn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-D</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cz-customizable</span></span>
<span class="line"><span style="color:#6A737D;"># Peer Dependencies: commitizen</span></span></code></pre></div><p>安装好模块后，通过配置告诉 <a href="https://github.com/commitizen/cz-cli" target="_blank" rel="noreferrer">commitizen</a> 使用 <a href="https://github.com/leoforfree/cz-customizable" target="_blank" rel="noreferrer">cz-customizable</a> 适配器：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// package.json</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;config&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;commitizen&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;path&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;node_modules/cz-customizable&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// package.json</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;config&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;commitizen&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;path&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;node_modules/cz-customizable&quot;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>最后在项目根目录下创建交互内容的配置文件（.cz-config.js 或 .config/cz-config.js）或在包文件指定配置文件所在：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// package.json</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;config&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;cz-customizable&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;config&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;config/path/to/my/config.js&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// package.json</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;config&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;cz-customizable&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;config&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;config/path/to/my/config.js&quot;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>然后就可以在配置文件中进行具体的配置了，官方也提供了<a href="https://github.com/leoforfree/cz-customizable/blob/master/cz-config-EXAMPLE.js" target="_blank" rel="noreferrer">配置示例</a>，可以参考示例进行更改，更多详情见<a href="https://github.com/leoforfree/cz-customizable#options" target="_blank" rel="noreferrer">官方介绍</a>。</p><h3 id="校验自定义的提交信息" tabindex="-1">校验自定义的提交信息 <a class="header-anchor" href="#校验自定义的提交信息" aria-label="Permalink to &quot;校验自定义的提交信息&quot;">​</a></h3><p>当我们使用 <a href="https://github.com/leoforfree/cz-customizable" target="_blank" rel="noreferrer">cz-customizable</a> 更改了交互式提交的内容后，就需要使用 <a href="https://github.com/whizark/commitlint-config-cz" target="_blank" rel="noreferrer">commitlint-config-cz</a> 对其进行校验了。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 安装</span></span>
<span class="line"><span style="color:#B392F0;">yarn</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-D</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">commitlint-config-cz</span></span>
<span class="line"><span style="color:#6A737D;"># Peer Dependencies: commitizen, cz-customizable</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 安装</span></span>
<span class="line"><span style="color:#6F42C1;">yarn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-D</span><span style="color:#24292E;"> </span><span style="color:#032F62;">commitlint-config-cz</span></span>
<span class="line"><span style="color:#6A737D;"># Peer Dependencies: commitizen, cz-customizable</span></span></code></pre></div><p>然后扩展 <a href="https://github.com/conventional-changelog/commitlint" target="_blank" rel="noreferrer">commitlint</a> 配置文件中的配置：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// commitlint.config.js</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  extends: [</span><span style="color:#9ECBFF;">&#39;other-config&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;cz&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// commitlint.config.js</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  extends: [</span><span style="color:#032F62;">&#39;other-config&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;cz&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>现在，您可以在一个位置（上述 cz-customizable 的配置文件）统一管理 <a href="https://github.com/leoforfree/cz-customizable" target="_blank" rel="noreferrer">cz-customizable</a> 和 <a href="https://github.com/conventional-changelog/commitlint" target="_blank" rel="noreferrer">commitlint</a> 的提交类型/范围了。</p><h2 id="扩展-rules" tabindex="-1">扩展 Rules <a class="header-anchor" href="#扩展-rules" aria-label="Permalink to &quot;扩展 Rules&quot;">​</a></h2><p>对于 <a href="https://github.com/conventional-changelog/commitlint" target="_blank" rel="noreferrer">commitlint</a> 默认支持的规则，可以根据团队要求在相应配置文件的 <code>rules</code> 字段进行配置。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  rules: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;body-max-line-length&#39;</span><span style="color:#E1E4E8;">: [</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;always&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  rules: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;body-max-line-length&#39;</span><span style="color:#24292E;">: [</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;always&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>另外，为它提供的每个插件也可以导出一个包含额外规则的 <code>rules</code> 对象，其中 <code>key</code> 为规则的名称、值为校验函数。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  rules: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;dollar-sign&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">parsed</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">when</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// rule implementation ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  rules: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;dollar-sign&#39;</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">parsed</span><span style="color:#24292E;">, </span><span style="color:#E36209;">when</span><span style="color:#24292E;">, </span><span style="color:#E36209;">value</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// rule implementation ...</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>通过本地插件的方式可以很方便的添加额外的规则：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// commitlint.config.js</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  rules: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;hello-world-rule&#39;</span><span style="color:#E1E4E8;">: [</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;always&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      rules: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;hello-world-rule&#39;</span><span style="color:#E1E4E8;">: ({ </span><span style="color:#FFAB70;">subject</span><span style="color:#E1E4E8;"> }) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">HELLO_WORLD</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Hello World&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">            subject.</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">HELLO_WORLD</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">\`Your subject should contain \${</span><span style="color:#79B8FF;">HELLO_WORLD</span><span style="color:#9ECBFF;">} message\`</span></span>
<span class="line"><span style="color:#E1E4E8;">          ];</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// commitlint.config.js</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  rules: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;hello-world-rule&#39;</span><span style="color:#24292E;">: [</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;always&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  plugins: [</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      rules: {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;hello-world-rule&#39;</span><span style="color:#24292E;">: ({ </span><span style="color:#E36209;">subject</span><span style="color:#24292E;"> }) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">HELLO_WORLD</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Hello World&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">            subject.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">HELLO_WORLD</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">\`Your subject should contain \${</span><span style="color:#005CC5;">HELLO_WORLD</span><span style="color:#032F62;">} message\`</span></span>
<span class="line"><span style="color:#24292E;">          ];</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  ]</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>更多信息可以参考<a href="https://commitlint.js.org/#/reference-plugins" target="_blank" rel="noreferrer">官方介绍</a>。</p><h3 id="配套的-adapter" tabindex="-1">配套的 Adapter <a class="header-anchor" href="#配套的-adapter" aria-label="Permalink to &quot;配套的 Adapter&quot;">​</a></h3><p>除了可以通过插件扩展校验规则外，<a href="https://github.com/conventional-changelog/commitlint" target="_blank" rel="noreferrer">commitlint</a> 针对 <a href="https://github.com/commitizen/cz-cli" target="_blank" rel="noreferrer">commitizen</a> 提供的 <a href="https://www.npmjs.com/package/@commitlint/cz-commitlint" target="_blank" rel="noreferrer">@commitlint/cz-commitlint</a> 适配器也支持对交互内容进行定制。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 安装</span></span>
<span class="line"><span style="color:#B392F0;">yarn</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-D</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">@commitlint/cz-commitlint</span></span>
<span class="line"><span style="color:#6A737D;"># Peer Dependencies: @commitlint/cli, commitizen</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 安装</span></span>
<span class="line"><span style="color:#6F42C1;">yarn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-D</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@commitlint/cz-commitlint</span></span>
<span class="line"><span style="color:#6A737D;"># Peer Dependencies: @commitlint/cli, commitizen</span></span></code></pre></div><p>配置 <a href="https://github.com/commitizen/cz-cli" target="_blank" rel="noreferrer">commitizen</a> 使用 <a href="https://www.npmjs.com/package/@commitlint/cz-commitlint" target="_blank" rel="noreferrer">@commitlint/cz-commitlint</a> 适配器：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// package.json</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;config&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;commitizen&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;path&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;@commitlint/cz-commitlint&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// package.json</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;config&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;commitizen&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;path&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;@commitlint/cz-commitlint&quot;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>然后就是在配置文件中进行具体的配置了，具体可参考<a href="https://commitlint.js.org/#/reference-prompt" target="_blank" rel="noreferrer">官方介绍</a>。</p><h2 id="adapters-本质" tabindex="-1">Adapters 本质 <a class="header-anchor" href="#adapters-本质" aria-label="Permalink to &quot;Adapters 本质&quot;">​</a></h2><p>使用 <a href="https://github.com/commitizen/cz-cli" target="_blank" rel="noreferrer">commitizen</a> 提交时，系统会提示您在提交时填写任何必需的提交字段，避免等到 Git 提交钩子运行时拒绝您的提交。</p><p>在<a href="https://github.com/commitizen/cz-cli" target="_blank" rel="noreferrer">commitizen</a>的内部运行时会进行一些初始化工作，然后加载相应的配置文件，如果没有加载到将会使用普通的 Git 命令进行提交。</p><p>![adapter-flow](/images/git/adapter-flow.png&quot; height=&quot;410)</p><p>否则，将会调用指定 Adapter 的 <code>prompter()</code> 方法，从而获取到用户的提交信息，在钩子模式下会将其写入到工作目录下 <code>.git/COMMIT_EDITMSG</code> 文件中。</p><p>所以，要创建一个自定义的适配器也很方便，调用<code>prompter()</code> 方法时 <a href="https://github.com/commitizen/cz-cli" target="_blank" rel="noreferrer">commitizen</a> 向 Adapters 提供了一个 <a href="https://github.com/sboudrias/inquirer.js/" target="_blank" rel="noreferrer">Inquirer.js</a> 实例，以此来获取用户的输入，然后调用 <code>commit</code> 回调。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// When a user runs \`git cz\`, prompter will be executed.</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// We pass you cz, which currently is just an instance of inquirer.js.</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Using this you can ask questions and get answers.</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// The commit callback should be executed when you&#39;re ready to</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// send back a commit template to git.</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// By default, we&#39;ll de-indent your commit template and</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// will keep empty lines.</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">prompter</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">inquirer</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">commit</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">commit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;chore: comit message&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// When a user runs \`git cz\`, prompter will be executed.</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// We pass you cz, which currently is just an instance of inquirer.js.</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Using this you can ask questions and get answers.</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// The commit callback should be executed when you&#39;re ready to</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// send back a commit template to git.</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// By default, we&#39;ll de-indent your commit template and</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// will keep empty lines.</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">prompter</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">inquirer</span><span style="color:#24292E;">, </span><span style="color:#E36209;">commit</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">commit</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;chore: comit message&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>至于如何使用 <a href="https://github.com/sboudrias/inquirer.js/" target="_blank" rel="noreferrer">Inquirer.js</a> 获取信息则可以参考它的官方介绍。</p><p>事实上，我们完全可以使用任何必要的手段捕获输入，最终只要用字符串调用 <code>commit</code> 回调就可以了。</p><h2 id="校验流程" tabindex="-1">校验流程 <a class="header-anchor" href="#校验流程" aria-label="Permalink to &quot;校验流程&quot;">​</a></h2><p>校验工具 <a href="https://github.com/conventional-changelog/commitlint" target="_blank" rel="noreferrer">commitlint</a> 是一个基于 <a href="https://github.com/yargs/yargs" target="_blank" rel="noreferrer">Yargs</a> 实现的一个命令行工具，它的核心流程主要包括获取提交信息-校验信息-输出报告：</p><p><img src="`+o+'" alt="lint-flw"></p><p>几乎每个步骤都对应了一个相应的 NPM 模块：</p><p><img src="'+e+`" alt="lint-cli"></p><p>在获取提交信息时，来源可以是从标准输入或者是从指定范围/上次编辑中读取提交消息：</p><p>![lint-message](/images/git/get-lint-message.png&quot; height=&quot;350)</p><p>获取到提交信息后，在校验之前还会进行一次解析，将提交消息解析为结构化数据，默认使用的是 <a href="https://github.com/conventional-changelog/conventional-changelog" target="_blank" rel="noreferrer">conventional-commits-parser</a> 模块中的 <code>sync()</code> 函数。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 提交信息为 test: test message</span></span>
<span class="line"><span style="color:#6A737D;">// 解析后，它的输出结果大致如下所示</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;test&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">scope</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">subject</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;test message&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">merge</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">header</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;test: test message&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">body</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">footer</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">notes</span><span style="color:#E1E4E8;">: [],</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">references</span><span style="color:#E1E4E8;">: [],</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">mentions</span><span style="color:#E1E4E8;">: [],</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">revert</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">raw</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;test: test message</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 提交信息为 test: test message</span></span>
<span class="line"><span style="color:#6A737D;">// 解析后，它的输出结果大致如下所示</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;test&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">scope</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">subject</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;test message&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">merge</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">header</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;test: test message&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">body</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">footer</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">notes</span><span style="color:#24292E;">: [],</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">references</span><span style="color:#24292E;">: [],</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">mentions</span><span style="color:#24292E;">: [],</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">revert</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">raw</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;test: test message</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&#39;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>回到上面规则扩展的部分，每个规则的第一个参数其实拿到的就是这里解析出来的结果，这样就可以很方便地针对提交信息的每个部分做出校验，结果返回一个数组。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  rules: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;dollar-sign&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">parsed</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">when</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* 是否通过校验 */</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;错误后的提示信息&#39;</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  rules: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;dollar-sign&#39;</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">parsed</span><span style="color:#24292E;">, </span><span style="color:#E36209;">when</span><span style="color:#24292E;">, </span><span style="color:#E36209;">value</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* 是否通过校验 */</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;错误后的提示信息&#39;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>当然具体的解析方式官方也提供了自定义的能力，你可以通过在配置文件中添加 <code>parserPreset</code> 字段进行配置。</p><p>最后，会将校验的结果整理起来并进行格式化的输出，格式化的方式也可以通过 <code>formatter</code> 字段进行配置。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>让 <a href="https://github.com/commitizen/cz-cli" target="_blank" rel="noreferrer">commitizen</a> 和 <a href="https://github.com/conventional-changelog/commitlint" target="_blank" rel="noreferrer">commitlint</a> 相互配合，同时运用其高度可配的特性，可以很方便的制定出符合团队要求的提交规范，这对于团队来说是有益的，希望可以在工作中落地，规范研发流程。</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="http://commitizen.github.io/cz-cli/" target="_blank" rel="noreferrer">Commitizen by commitizen</a></li><li><a href="https://commitlint.js.org/" target="_blank" rel="noreferrer">commitlint - Lint commit messages</a></li><li><a href="https://github.com/sboudrias/inquirer.js/" target="_blank" rel="noreferrer">Inquirer.js</a></li></ul>`,57),r=[c];function i(E,y,m,d,u,h){return n(),a("div",null,r)}const b=s(t,[["render",i]]);export{F as __pageData,b as default};
