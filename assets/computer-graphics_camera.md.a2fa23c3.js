import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.e9126b17.js";const f=JSON.parse('{"title":"摄像机","description":"","frontmatter":{},"headers":[],"relativePath":"computer-graphics/camera.md","filePath":"computer-graphics/camera.md","lastUpdated":1713579991000}'),p={name:"computer-graphics/camera.md"},o=l(`<h1 id="摄像机" tabindex="-1">摄像机 <a class="header-anchor" href="#摄像机" aria-label="Permalink to &quot;摄像机&quot;">​</a></h1><p>OpenGL 本身没有摄像机的概念，当运动是相对的，所以我们可以通过把场景中的所有物体往相反方向移动的方式来模拟出摄像机，产生一种摄像机在移动的感觉。</p><h2 id="定义摄像机" tabindex="-1">定义摄像机 <a class="header-anchor" href="#定义摄像机" aria-label="Permalink to &quot;定义摄像机&quot;">​</a></h2><p>如何定义摄像机？首先我们需要定义摄像机的位置，也就是摄像机在世界坐标系中的位置：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::vec3 cameraPos </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vec3</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::vec3 cameraPos </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vec3</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">);</span></span></code></pre></div><p>下一个需要的向量是摄像机的方向，现在我们让摄像机指向场景原点：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::vec3 cameraTarget </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vec3</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 指向正 z 轴方向，与摄像机实际指向的方向是正好相反</span></span>
<span class="line"><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::vec3 cameraDirection </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">normalize</span><span style="color:#E1E4E8;">(cameraPos </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> cameraTarget);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::vec3 cameraTarget </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vec3</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 指向正 z 轴方向，与摄像机实际指向的方向是正好相反</span></span>
<span class="line"><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::vec3 cameraDirection </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">normalize</span><span style="color:#24292E;">(cameraPos </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> cameraTarget);</span></span></code></pre></div><p>得到方向向量后，我们需要再指定一个向上的向量（它是垂直于平面空间，而不是上面的方向向量），为了得到右向量(它代表摄像机空间的 x 轴的正方向)，我们可以把上向量和第二步得到的方向向量进行叉乘，这样会得到指向 x 轴正方向的那个向量：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::vec3 up </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vec3</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">); # 人为定义</span></span>
<span class="line"><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::vec3 cameraRight </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">normalize</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">cross</span><span style="color:#E1E4E8;">(up, cameraDirection));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::vec3 up </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vec3</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">); # 人为定义</span></span>
<span class="line"><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::vec3 cameraRight </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">normalize</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">cross</span><span style="color:#24292E;">(up, cameraDirection));</span></span></code></pre></div><p>有了 x 轴向量和 z 轴向量，获取一个指向摄像机的正 y 轴向量就相对简单了（我们把右向量和方向向量进行叉乘）：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::vec3 cameraUp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">cross</span><span style="color:#E1E4E8;">(cameraDirection, cameraRight);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::vec3 cameraUp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">cross</span><span style="color:#24292E;">(cameraDirection, cameraRight);</span></span></code></pre></div><blockquote><p>使用矩阵的好处之一是如果你使用 3 个相互垂直（或非线性）的轴定义了一个坐标空间，你可以用这 3 个轴外加一个平移向量来创建一个矩阵，并且你可以用这个矩阵乘以任何向量来将其变换到那个坐标空间。这正是 LookAt 矩阵所做的。</p></blockquote><p>在 GLM 中提供了对 LookAt 矩阵的支持，对于上面定义的摄像机，我们可以通过指定摄像机位置、目标位置和向上向量来得到一个对应的观察矩阵：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::mat4 view;</span></span>
<span class="line"><span style="color:#E1E4E8;">view </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">lookAt</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vec3</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vec3</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vec3</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::mat4 view;</span></span>
<span class="line"><span style="color:#24292E;">view </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">lookAt</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vec3</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vec3</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vec3</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">));</span></span></code></pre></div><h2 id="视角移动" tabindex="-1">视角移动 <a class="header-anchor" href="#视角移动" aria-label="Permalink to &quot;视角移动&quot;">​</a></h2><p>为了让场景变得更加有趣，先在我们的程序前面定义一些摄像机变量：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::vec3 cameraPos   </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vec3</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">,  </span><span style="color:#79B8FF;">3.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::vec3 cameraFront </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vec3</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::vec3 cameraUp    </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vec3</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">,  </span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::vec3 cameraPos   </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vec3</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">,  </span><span style="color:#005CC5;">3.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::vec3 cameraFront </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vec3</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::vec3 cameraUp    </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vec3</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">,  </span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">);</span></span></code></pre></div><p>此时观察矩阵为：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">view </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">lookAt</span><span style="color:#E1E4E8;">(cameraPos, cameraPos </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> cameraFront, cameraUp);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">view </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">lookAt</span><span style="color:#24292E;">(cameraPos, cameraPos </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> cameraFront, cameraUp);</span></span></code></pre></div><p>为了能够改变视角，我们需要根据鼠标的输入改变 cameraFront 向量。</p><p>欧拉角是可以表示 3D 空间中任何旋转的 3 个值，对于我们的摄像机系统来说，我们只关心俯仰角和偏航角。</p><p>我们怎么得到俯仰角和偏航角？偏航角和俯仰角是通过鼠标（或手柄）移动获得的，水平的移动影响偏航角，竖直的移动影响俯仰角。</p><p>原理就是，储存上一帧鼠标的位置，在当前帧中我们当前计算鼠标位置与上一帧的位置相差多少。如果水平/竖直差别越大那么俯仰角或偏航角就改变越大，也就是摄像机需要移动更多的距离。</p><p>首先我们要告诉 GLFW，它应该隐藏光标，并捕捉它。我们可以用一个简单地配置调用来完成：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">glfwSetInputMode</span><span style="color:#E1E4E8;">(window, GLFW_CURSOR, GLFW_CURSOR_DISABLED);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">glfwSetInputMode</span><span style="color:#24292E;">(window, GLFW_CURSOR, GLFW_CURSOR_DISABLED);</span></span></code></pre></div><p>为了计算俯仰角和偏航角，我们需要让 GLFW 监听鼠标移动事件。（和键盘输入相似）我们会用一个回调函数来完成，函数的原型如下：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mouse_callback</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">GLFWwindow</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">window</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">xpos</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">ypos</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mouse_callback</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">GLFWwindow</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">window</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#E36209;">xpos</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#E36209;">ypos</span><span style="color:#24292E;">);</span></span></code></pre></div><p>当我们用 GLFW 注册了回调函数之后，鼠标一移动 mouse_callback 函数就会被调用：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">glfwSetCursorPosCallback</span><span style="color:#E1E4E8;">(window, mouse_callback);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">glfwSetCursorPosCallback</span><span style="color:#24292E;">(window, mouse_callback);</span></span></code></pre></div><p>在 mouse_callback 函数中，我们需要计算偏航角和俯仰角：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> firstMouse </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">float</span><span style="color:#E1E4E8;"> lastX </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">400</span><span style="color:#E1E4E8;">, lastY </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">300</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">float</span><span style="color:#E1E4E8;"> yaw </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">90.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">float</span><span style="color:#E1E4E8;"> pitch </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mouse_callback</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">GLFWwindow</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">window</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">xpos</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">ypos</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(firstMouse)</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        lastX </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> xpos;</span></span>
<span class="line"><span style="color:#E1E4E8;">        lastY </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ypos;</span></span>
<span class="line"><span style="color:#E1E4E8;">        firstMouse </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">float</span><span style="color:#E1E4E8;"> xoffset </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> xpos </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> lastX;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">float</span><span style="color:#E1E4E8;"> yoffset </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> lastY </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> ypos;</span></span>
<span class="line"><span style="color:#E1E4E8;">    lastX </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> xpos;</span></span>
<span class="line"><span style="color:#E1E4E8;">    lastY </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ypos;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">float</span><span style="color:#E1E4E8;"> sensitivity </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.05</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    xoffset </span><span style="color:#F97583;">*=</span><span style="color:#E1E4E8;"> sensitivity;</span></span>
<span class="line"><span style="color:#E1E4E8;">    yoffset </span><span style="color:#F97583;">*=</span><span style="color:#E1E4E8;"> sensitivity;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    yaw   </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> xoffset;</span></span>
<span class="line"><span style="color:#E1E4E8;">    pitch </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> yoffset;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(pitch </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">89.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        pitch </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">89.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(pitch </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">89.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        pitch </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">89.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::vec3 front;</span></span>
<span class="line"><span style="color:#E1E4E8;">    front.x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cos</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">radians</span><span style="color:#E1E4E8;">(yaw)) </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cos</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">radians</span><span style="color:#E1E4E8;">(pitch));</span></span>
<span class="line"><span style="color:#E1E4E8;">    front.y </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sin</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">radians</span><span style="color:#E1E4E8;">(pitch));</span></span>
<span class="line"><span style="color:#E1E4E8;">    front.z </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sin</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">radians</span><span style="color:#E1E4E8;">(yaw)) </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cos</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">radians</span><span style="color:#E1E4E8;">(pitch));</span></span>
<span class="line"><span style="color:#E1E4E8;">    cameraFront </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">normalize</span><span style="color:#E1E4E8;">(front);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> firstMouse </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">float</span><span style="color:#24292E;"> lastX </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">400</span><span style="color:#24292E;">, lastY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">300</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">float</span><span style="color:#24292E;"> yaw </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">90.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">float</span><span style="color:#24292E;"> pitch </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mouse_callback</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">GLFWwindow</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">window</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#E36209;">xpos</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#E36209;">ypos</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(firstMouse)</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        lastX </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> xpos;</span></span>
<span class="line"><span style="color:#24292E;">        lastY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ypos;</span></span>
<span class="line"><span style="color:#24292E;">        firstMouse </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">float</span><span style="color:#24292E;"> xoffset </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> xpos </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> lastX;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">float</span><span style="color:#24292E;"> yoffset </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lastY </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> ypos;</span></span>
<span class="line"><span style="color:#24292E;">    lastX </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> xpos;</span></span>
<span class="line"><span style="color:#24292E;">    lastY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ypos;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">float</span><span style="color:#24292E;"> sensitivity </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.05</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    xoffset </span><span style="color:#D73A49;">*=</span><span style="color:#24292E;"> sensitivity;</span></span>
<span class="line"><span style="color:#24292E;">    yoffset </span><span style="color:#D73A49;">*=</span><span style="color:#24292E;"> sensitivity;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    yaw   </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> xoffset;</span></span>
<span class="line"><span style="color:#24292E;">    pitch </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> yoffset;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(pitch </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">89.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        pitch </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">89.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(pitch </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">89.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        pitch </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">89.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::vec3 front;</span></span>
<span class="line"><span style="color:#24292E;">    front.x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cos</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">radians</span><span style="color:#24292E;">(yaw)) </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cos</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">radians</span><span style="color:#24292E;">(pitch));</span></span>
<span class="line"><span style="color:#24292E;">    front.y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sin</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">radians</span><span style="color:#24292E;">(pitch));</span></span>
<span class="line"><span style="color:#24292E;">    front.z </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sin</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">radians</span><span style="color:#24292E;">(yaw)) </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cos</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">radians</span><span style="color:#24292E;">(pitch));</span></span>
<span class="line"><span style="color:#24292E;">    cameraFront </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">normalize</span><span style="color:#24292E;">(front);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="缩放" tabindex="-1">缩放 <a class="header-anchor" href="#缩放" aria-label="Permalink to &quot;缩放&quot;">​</a></h2><p>视野（Field of View）或 fov 定义了我们可以看到场景中多大的范围。当视野变小时，场景投影出来的空间就会减小，产生放大了的感觉。</p><p>我们会使用鼠标的滚轮来放大。与鼠标移动、键盘输入一样，我们需要一个鼠标滚轮的回调函数：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">scroll_callback</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">GLFWwindow</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">window</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">xoffset</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">yoffset</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(fov </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> fov </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">45.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    fov </span><span style="color:#F97583;">-=</span><span style="color:#E1E4E8;"> yoffset;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(fov </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    fov </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(fov </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">45.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    fov </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">45.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">scroll_callback</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">GLFWwindow</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">window</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#E36209;">xoffset</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#E36209;">yoffset</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(fov </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> fov </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">45.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    fov </span><span style="color:#D73A49;">-=</span><span style="color:#24292E;"> yoffset;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(fov </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    fov </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(fov </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">45.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    fov </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">45.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>当滚动鼠标滚轮的时候，yoffset 值代表我们竖直滚动的大小。当 scroll_callback 函数被调用后，我们改变全局变量 fov 变量的内容。</p><p>因为 45.0f 是默认的视野值，我们将会把缩放级别限制在 1.0f 到 45.0f。</p><p>当然，需要先注册鼠标滚轮的回调函数：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">glfwSetScrollCallback</span><span style="color:#E1E4E8;">(window, scroll_callback);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">glfwSetScrollCallback</span><span style="color:#24292E;">(window, scroll_callback);</span></span></code></pre></div><p>现在在每一帧都必须把透视投影矩阵上传到 GPU，但现在使用 fov 变量作为它的视野：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">projection </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">perspective</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">radians</span><span style="color:#E1E4E8;">(fov), </span><span style="color:#79B8FF;">800.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">600.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.1</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">projection </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">perspective</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">radians</span><span style="color:#24292E;">(fov), </span><span style="color:#005CC5;">800.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">600.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.1</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">100.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">);</span></span></code></pre></div><p>现在，我们就实现了一个简单的摄像机系统了，它能够让我们在 3D 环境中自由移动。</p>`,42),e=[o];function c(t,r,y,E,i,F){return a(),n("div",null,e)}const C=s(p,[["render",c]]);export{f as __pageData,C as default};
