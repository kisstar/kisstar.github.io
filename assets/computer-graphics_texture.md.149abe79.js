import{_ as n,o as a,c as l,O as p}from"./chunks/framework.2a7ed5c6.js";const o="/images/computer-graphics/filter_nearest.png",e="/images/computer-graphics/filter_linear.png",d=JSON.parse('{"title":"纹理","description":"","frontmatter":{},"headers":[],"relativePath":"computer-graphics/texture.md","filePath":"computer-graphics/texture.md","lastUpdated":1743313216000}'),t={name:"computer-graphics/texture.md"};function c(r,s,E,y,i,F){return a(),l("div",null,s[0]||(s[0]=[p('<h1 id="纹理" tabindex="-1">纹理 <a class="header-anchor" href="#纹理" aria-label="Permalink to &quot;纹理&quot;">​</a></h1><p>纹理是一个 2D 图片（甚至也有 1D 和 3D 的纹理），它可以用来添加物体的细节；为了能够把纹理映射到三角形上，我们需要指定三角形的每个顶点各自对应纹理的哪个部分。</p><h2 id="环绕方式" tabindex="-1">环绕方式 <a class="header-anchor" href="#环绕方式" aria-label="Permalink to &quot;环绕方式&quot;">​</a></h2><p>纹理坐标的范围通常是从(0, 0)到(1, 1)，那如果我们把纹理坐标设置在范围之外会发生什么？</p><p>OpenGL 默认的行为是重复这个纹理图像（我们基本上忽略浮点纹理坐标的整数部分），但 OpenGL 提供了更多的选择：</p><table><thead><tr><th style="text-align:left;">环绕方式</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">GL_REPEAT</td><td style="text-align:left;">对纹理的默认行为。重复纹理图像。</td></tr><tr><td style="text-align:left;">GL_MIRRORED_REPEAT</td><td style="text-align:left;">和 GL_REPEAT 一样，但每次重复图片是镜像放置的。</td></tr><tr><td style="text-align:left;">GL_CLAMP_TO_EDGE</td><td style="text-align:left;">纹理坐标会被约束在 0 到 1 之间，超出的部分会重复纹理坐标的边缘，产生一种边缘被拉伸的效果。</td></tr><tr><td style="text-align:left;">GL_CLAMP_TO_BORDER</td><td style="text-align:left;">超出的坐标为用户指定的边缘颜色。</td></tr></tbody></table><p>其中的每个选项都可以使用 glTexParameter* 函数对单独的一个坐标轴设置。</p><h2 id="纹理过滤" tabindex="-1">纹理过滤 <a class="header-anchor" href="#纹理过滤" aria-label="Permalink to &quot;纹理过滤&quot;">​</a></h2><p>纹理坐标不依赖于分辨率，它可以是任意浮点值，所以 OpenGL 需要知道怎样将纹理像素映射到纹理坐标。</p><p>邻近过滤，是 OpenGL 默认的纹理过滤方式。此时会选择中心点最接近纹理坐标的那个像素。</p><p><img src="'+o+'" alt="filter_nearest"></p><p>线性过滤，会基于纹理坐标附近的纹理像素，计算出一个插值，近似出这些纹理像素之间的颜色。一个纹理像素的中心距离纹理坐标越近，那么这个纹理像素的颜色对最终的样本颜色的贡献越大。</p><p><img src="'+e+`" alt="filter_linear"></p><p>当进行放大和缩小操作的时候可以设置纹理过滤的选项，比如你可以在纹理被缩小的时候使用邻近过滤，被放大时使用线性过滤。</p><h2 id="多级渐远纹理" tabindex="-1">多级渐远纹理 <a class="header-anchor" href="#多级渐远纹理" aria-label="Permalink to &quot;多级渐远纹理&quot;">​</a></h2><p>假设我们有一个包含着上千物体的大房间，每个物体上都有纹理。有些物体会很远，但其纹理会拥有与近处物体同样高的分辨率。</p><p>由于远处的物体可能只产生很少的片段，OpenGL 从高分辨率纹理中为这些片段获取正确的颜色值就很困难，因为它需要对一个跨过纹理很大部分的片段只拾取一个纹理颜色。在小物体上这会产生不真实的感觉，并且高分辨率纹理浪费了内存。</p><p>OpenGL 使用一种叫做多级渐远纹理（Mipmap）的概念来解决这个问题，它简单来说就是一系列的纹理图像，后一个纹理图像是前一个的二分之一。</p><p>距观察者的距离超过一定的阈值，OpenGL 会使用不同的多级渐远纹理，即最适合物体的距离的那个。由于距离远，解析度不高也不会被用户注意到。同时，多级渐远纹理另一加分之处是它的性能非常好。</p><p>切换多级渐远纹理级别时你也可以在两个不同多级渐远纹理级别之间使用 NEAREST 和 LINEAR 过滤，避免产生不真实的生硬边界。</p><table><thead><tr><th style="text-align:left;">过滤方式</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">GL_NEAREST_MIPMAP_NEAREST</td><td style="text-align:left;">使用最邻近的多级渐远纹理来匹配像素大小，并使用邻近插值进行纹理采样</td></tr><tr><td style="text-align:left;">GL_LINEAR_MIPMAP_NEAREST</td><td style="text-align:left;">使用最邻近的多级渐远纹理级别，并使用线性插值进行采样</td></tr><tr><td style="text-align:left;">GL_NEAREST_MIPMAP_LINEAR</td><td style="text-align:left;">在两个最匹配像素大小的多级渐远纹理之间进行线性插值，使用邻近插值进行采样</td></tr><tr><td style="text-align:left;">GL_LINEAR_MIPMAP_LINEAR</td><td style="text-align:left;">在两个邻近的多级渐远纹理之间使用线性插值，并使用线性插值进行采样</td></tr></tbody></table><h2 id="创建纹理" tabindex="-1">创建纹理 <a class="header-anchor" href="#创建纹理" aria-label="Permalink to &quot;创建纹理&quot;">​</a></h2><p>当调用 glTexImage2D 时，当前绑定的纹理对象就会被附加上纹理图像。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;iostream&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;stb_image.h&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;glad/glad.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createTexture</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">filename</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">use_RGBA</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">unsigned</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> texture;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">glGenTextures</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">texture);</span></span>
<span class="line"><span style="color:#6A737D;">    // 纹理单元 GL_TEXTURE0 默认被激活</span></span>
<span class="line"><span style="color:#6A737D;">    // glActiveTexture(GL_TEXTURE0);</span></span>
<span class="line"><span style="color:#6A737D;">    // 绑定纹理对象（之后任何的纹理指令都可以配置当前绑定的纹理）</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">glBindTexture</span><span style="color:#E1E4E8;">(GL_TEXTURE_2D, texture);</span><span style="color:#6A737D;"> // （会绑定这个纹理到当前激活的纹理单元）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // 设置纹理环绕方式</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">glTexParameteri</span><span style="color:#E1E4E8;">(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_MIRRORED_REPEAT);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">glTexParameteri</span><span style="color:#E1E4E8;">(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_MIRRORED_REPEAT);</span></span>
<span class="line"><span style="color:#6A737D;">    // 设置纹理过滤方式</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">glTexParameteri</span><span style="color:#E1E4E8;">(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">glTexParameteri</span><span style="color:#E1E4E8;">(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);</span></span>
<span class="line"><span style="color:#6A737D;">    // 多级渐远纹理主要是使用在纹理被缩小的情况下的</span></span>
<span class="line"><span style="color:#6A737D;">    // glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> width, height, nrChannels;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">unsigned</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">stbi_load</span><span style="color:#E1E4E8;">(filename, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">width, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">height, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">nrChannels, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (data)</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#6A737D;">        // 生成纹理</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (use_RGBA)</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">glTexImage2D</span><span style="color:#E1E4E8;">(GL_TEXTURE_2D, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, GL_RGBA, width, height, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, GL_RGBA, GL_UNSIGNED_BYTE, data);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">glTexImage2D</span><span style="color:#E1E4E8;">(GL_TEXTURE_2D, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, GL_RGB, width, height, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, GL_RGB, GL_UNSIGNED_BYTE, data);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">glGenerateMipmap</span><span style="color:#E1E4E8;">(GL_TEXTURE_2D);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::cout </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Failed to load texture&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::endl;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // 释放图像的内存</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">stbi_image_free</span><span style="color:#E1E4E8;">(data);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> texture;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;iostream&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;stb_image.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;glad/glad.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createTexture</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">filename</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#E36209;">use_RGBA</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">unsigned</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> texture;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">glGenTextures</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">texture);</span></span>
<span class="line"><span style="color:#6A737D;">    // 纹理单元 GL_TEXTURE0 默认被激活</span></span>
<span class="line"><span style="color:#6A737D;">    // glActiveTexture(GL_TEXTURE0);</span></span>
<span class="line"><span style="color:#6A737D;">    // 绑定纹理对象（之后任何的纹理指令都可以配置当前绑定的纹理）</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">glBindTexture</span><span style="color:#24292E;">(GL_TEXTURE_2D, texture);</span><span style="color:#6A737D;"> // （会绑定这个纹理到当前激活的纹理单元）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // 设置纹理环绕方式</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">glTexParameteri</span><span style="color:#24292E;">(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_MIRRORED_REPEAT);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">glTexParameteri</span><span style="color:#24292E;">(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_MIRRORED_REPEAT);</span></span>
<span class="line"><span style="color:#6A737D;">    // 设置纹理过滤方式</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">glTexParameteri</span><span style="color:#24292E;">(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">glTexParameteri</span><span style="color:#24292E;">(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);</span></span>
<span class="line"><span style="color:#6A737D;">    // 多级渐远纹理主要是使用在纹理被缩小的情况下的</span></span>
<span class="line"><span style="color:#6A737D;">    // glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> width, height, nrChannels;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">unsigned</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">stbi_load</span><span style="color:#24292E;">(filename, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">width, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">height, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">nrChannels, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (data)</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#6A737D;">        // 生成纹理</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (use_RGBA)</span></span>
<span class="line"><span style="color:#24292E;">        {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">glTexImage2D</span><span style="color:#24292E;">(GL_TEXTURE_2D, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, GL_RGBA, width, height, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, GL_RGBA, GL_UNSIGNED_BYTE, data);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">        {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">glTexImage2D</span><span style="color:#24292E;">(GL_TEXTURE_2D, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, GL_RGB, width, height, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, GL_RGB, GL_UNSIGNED_BYTE, data);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">glGenerateMipmap</span><span style="color:#24292E;">(GL_TEXTURE_2D);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::cout </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Failed to load texture&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::endl;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // 释放图像的内存</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">stbi_image_free</span><span style="color:#24292E;">(data);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> texture;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="应用纹理" tabindex="-1">应用纹理 <a class="header-anchor" href="#应用纹理" aria-label="Permalink to &quot;应用纹理&quot;">​</a></h2><p>为了能够把纹理映射到三角形上，我们需要指定三角形的每个顶点各自对应纹理的哪个部分。这样每个顶点就会关联着一个纹理坐标，用来标明该从纹理图像的哪个部分采样。之后在图形的其它片段上进行片段插值。</p><p>所以，创建好纹理之后，我们需要告知 OpenGL 如何采样纹理，所以我们必须使用纹理坐标更新顶点数据：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createVAO</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">float</span><span style="color:#E1E4E8;"> vertices[] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">        // ---- 位置 ----  ---- 颜色 ----    - 纹理坐标 -</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">0.5</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.5</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">,</span><span style="color:#6A737D;">   // 右上</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">0.5</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">0.5</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">,</span><span style="color:#6A737D;">  // 右下</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">0.5</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">0.5</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">,</span><span style="color:#6A737D;"> // 左下</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">0.5</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.5</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1.0</span><span style="color:#F97583;">f</span><span style="color:#6A737D;">   // 左上</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#6A737D;">    // ...</span></span>
<span class="line"><span style="color:#6A737D;">    // 告诉 OpenGL 该如何解析顶点数据</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">glVertexAttribPointer</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#6A737D;"> /* 指定要配置的顶点属性 */</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                          </span><span style="color:#79B8FF;">3</span><span style="color:#6A737D;"> /* 顶点属性的大小 */</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                          GL_FLOAT</span><span style="color:#6A737D;"> /* 数据的类型 */</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                          GL_FALSE</span><span style="color:#6A737D;"> /* 是否标准化 */</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                          </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">sizeof</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">float</span><span style="color:#E1E4E8;">)</span><span style="color:#6A737D;"> /* 步长 */</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                          (</span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">)</span><span style="color:#79B8FF;">0</span><span style="color:#6A737D;"> /* 位置数据在缓冲中起始位置的偏移量 */</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">    // 启用顶点属性</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">glEnableVertexAttribArray</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // color attribute</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">glVertexAttribPointer</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, GL_FLOAT, GL_FALSE, </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">sizeof</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">float</span><span style="color:#E1E4E8;">), (</span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">)(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">sizeof</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">float</span><span style="color:#E1E4E8;">)));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">glEnableVertexAttribArray</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">    // texture coord attribute</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">glVertexAttribPointer</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, GL_FLOAT, GL_FALSE, </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">sizeof</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">float</span><span style="color:#E1E4E8;">), (</span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">)(</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">sizeof</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">float</span><span style="color:#E1E4E8;">)));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">glEnableVertexAttribArray</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">    // ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> VAO;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createVAO</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">float</span><span style="color:#24292E;"> vertices[] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">        // ---- 位置 ----  ---- 颜色 ----    - 纹理坐标 -</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">0.5</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.5</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">,</span><span style="color:#6A737D;">   // 右上</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">0.5</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0.5</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">,</span><span style="color:#6A737D;">  // 右下</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0.5</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0.5</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">,</span><span style="color:#6A737D;"> // 左下</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0.5</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.5</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1.0</span><span style="color:#D73A49;">f</span><span style="color:#6A737D;">   // 左上</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#6A737D;">    // ...</span></span>
<span class="line"><span style="color:#6A737D;">    // 告诉 OpenGL 该如何解析顶点数据</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">glVertexAttribPointer</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#6A737D;"> /* 指定要配置的顶点属性 */</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                          </span><span style="color:#005CC5;">3</span><span style="color:#6A737D;"> /* 顶点属性的大小 */</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                          GL_FLOAT</span><span style="color:#6A737D;"> /* 数据的类型 */</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                          GL_FALSE</span><span style="color:#6A737D;"> /* 是否标准化 */</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                          </span><span style="color:#005CC5;">8</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">sizeof</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">float</span><span style="color:#24292E;">)</span><span style="color:#6A737D;"> /* 步长 */</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                          (</span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">)</span><span style="color:#005CC5;">0</span><span style="color:#6A737D;"> /* 位置数据在缓冲中起始位置的偏移量 */</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">    // 启用顶点属性</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">glEnableVertexAttribArray</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // color attribute</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">glVertexAttribPointer</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, GL_FLOAT, GL_FALSE, </span><span style="color:#005CC5;">8</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">sizeof</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">float</span><span style="color:#24292E;">), (</span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">)(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">sizeof</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">float</span><span style="color:#24292E;">)));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">glEnableVertexAttribArray</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">    // texture coord attribute</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">glVertexAttribPointer</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, GL_FLOAT, GL_FALSE, </span><span style="color:#005CC5;">8</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">sizeof</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">float</span><span style="color:#24292E;">), (</span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">)(</span><span style="color:#005CC5;">6</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">sizeof</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">float</span><span style="color:#24292E;">)));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">glEnableVertexAttribArray</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">    // ...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> VAO;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>接着我们需要调整顶点着色器使其能够接受顶点坐标为一个顶点属性，并把坐标传给片段着色器：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::string vertexString </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SHADER_STRING</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#6A737D;">    // 设定了输入变量的位置值</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">layout</span><span style="color:#E1E4E8;">(location </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) in vec3 aPos;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">layout</span><span style="color:#E1E4E8;">(location </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) in vec3 aColor;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">layout</span><span style="color:#E1E4E8;">(location </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) in vec2 aTexCoord;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    out vec3 ourColor;</span></span>
<span class="line"><span style="color:#E1E4E8;">    out vec2 TexCoord;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        ourColor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> aColor;</span></span>
<span class="line"><span style="color:#E1E4E8;">        TexCoord </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> aTexCoord;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">        // 为了设置顶点着色器的输出，我们必须把位置数据赋值给预定义的 gl_Position 变量，它在幕后是 vec4 类型的</span></span>
<span class="line"><span style="color:#6A737D;">        // 在真实的程序里输入数据通常都不是标准化设备坐标，所以我们首先必须先把它们转换至 OpenGL 的可视区域内</span></span>
<span class="line"><span style="color:#E1E4E8;">        gl_Position </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">vec4</span><span style="color:#E1E4E8;">(aPos.x, aPos.y, aPos.z, </span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::string vertexString </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SHADER_STRING</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#6A737D;">    // 设定了输入变量的位置值</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">layout</span><span style="color:#24292E;">(location </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) in vec3 aPos;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">layout</span><span style="color:#24292E;">(location </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) in vec3 aColor;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">layout</span><span style="color:#24292E;">(location </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) in vec2 aTexCoord;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    out vec3 ourColor;</span></span>
<span class="line"><span style="color:#24292E;">    out vec2 TexCoord;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        ourColor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> aColor;</span></span>
<span class="line"><span style="color:#24292E;">        TexCoord </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> aTexCoord;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">        // 为了设置顶点着色器的输出，我们必须把位置数据赋值给预定义的 gl_Position 变量，它在幕后是 vec4 类型的</span></span>
<span class="line"><span style="color:#6A737D;">        // 在真实的程序里输入数据通常都不是标准化设备坐标，所以我们首先必须先把它们转换至 OpenGL 的可视区域内</span></span>
<span class="line"><span style="color:#24292E;">        gl_Position </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">vec4</span><span style="color:#24292E;">(aPos.x, aPos.y, aPos.z, </span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span></code></pre></div><p>片段着色器也应该能访问纹理对象，但是我们怎样能把纹理对象传给片段着色器呢？</p><p>GLSL 有一个供纹理对象使用的内建数据类型，叫做采样器，它以纹理类型作为后缀，在我们的例子中的 sampler2D。</p><p>我们可以简单声明一个 uniform sampler2D 把一个纹理添加到片段着色器中，稍后我们会把纹理赋值给这个 uniform。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::string fragString </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SHADER_STRING</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#6A737D;">    // 片段着色器只需要一个输出变量，这个变量是一个 4 分量向量，它表示的是最终的输出颜色</span></span>
<span class="line"><span style="color:#E1E4E8;">    out vec4 FragColor;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    in vec3 ourColor;</span></span>
<span class="line"><span style="color:#E1E4E8;">    in vec2 TexCoord;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    uniform sampler2D ourTexture;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        FragColor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">texture</span><span style="color:#E1E4E8;">(ourTexture, TexCoord) </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">vec4</span><span style="color:#E1E4E8;">(ourColor, </span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::string fragString </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SHADER_STRING</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#6A737D;">    // 片段着色器只需要一个输出变量，这个变量是一个 4 分量向量，它表示的是最终的输出颜色</span></span>
<span class="line"><span style="color:#24292E;">    out vec4 FragColor;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    in vec3 ourColor;</span></span>
<span class="line"><span style="color:#24292E;">    in vec2 TexCoord;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    uniform sampler2D ourTexture;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        FragColor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">texture</span><span style="color:#24292E;">(ourTexture, TexCoord) </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">vec4</span><span style="color:#24292E;">(ourColor, </span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span></code></pre></div><p>我们使用 GLSL 内建的 texture 函数来采样纹理的颜色，该函数会使用之前设置的纹理参数对相应的颜色值进行采样。</p><h2 id="更新渲染" tabindex="-1">更新渲染 <a class="header-anchor" href="#更新渲染" aria-label="Permalink to &quot;更新渲染&quot;">​</a></h2><p>最后，在调用 glDrawElements 之前绑定纹理就可以了，它会自动把纹理赋值给片段着色器的采样器：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#6A737D;">    // ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">stbi_set_flip_vertically_on_load</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;"> // 翻转Y轴</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> texture </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createTexture</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;static-resources/container.jpeg&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // 渲染循环</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">glfwWindowShouldClose</span><span style="color:#E1E4E8;">(window))</span><span style="color:#6A737D;"> // 检查一次 GLFW 是否被要求退出</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#6A737D;">        // ...</span></span>
<span class="line"><span style="color:#6A737D;">        // 渲染指令</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">glClearColor</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0.2</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.3</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.3</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">glClear</span><span style="color:#E1E4E8;">(GL_COLOR_BUFFER_BIT);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">glBindTexture</span><span style="color:#E1E4E8;">(GL_TEXTURE_2D, texture);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">CHECK_GL</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">glUseProgram</span><span style="color:#E1E4E8;">(shaderProgram));</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">glBindVertexArray</span><span style="color:#E1E4E8;">(VAO);</span></span>
<span class="line"><span style="color:#6A737D;">        // glDrawArrays(GL_TRIANGLES, 0, 3);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">glDrawElements</span><span style="color:#E1E4E8;">(GL_TRIANGLES, </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">, GL_UNSIGNED_INT, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">        // ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    // ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#6A737D;">    // ...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">stbi_set_flip_vertically_on_load</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span><span style="color:#6A737D;"> // 翻转Y轴</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> texture </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createTexture</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;static-resources/container.jpeg&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // 渲染循环</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">glfwWindowShouldClose</span><span style="color:#24292E;">(window))</span><span style="color:#6A737D;"> // 检查一次 GLFW 是否被要求退出</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#6A737D;">        // ...</span></span>
<span class="line"><span style="color:#6A737D;">        // 渲染指令</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">glClearColor</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.2</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.3</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.3</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">glClear</span><span style="color:#24292E;">(GL_COLOR_BUFFER_BIT);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">glBindTexture</span><span style="color:#24292E;">(GL_TEXTURE_2D, texture);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">CHECK_GL</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">glUseProgram</span><span style="color:#24292E;">(shaderProgram));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">glBindVertexArray</span><span style="color:#24292E;">(VAO);</span></span>
<span class="line"><span style="color:#6A737D;">        // glDrawArrays(GL_TRIANGLES, 0, 3);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">glDrawElements</span><span style="color:#24292E;">(GL_TRIANGLES, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">, GL_UNSIGNED_INT, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">        // ...</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    // ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="纹理单元" tabindex="-1">纹理单元 <a class="header-anchor" href="#纹理单元" aria-label="Permalink to &quot;纹理单元&quot;">​</a></h2><p>在上面的分片着色器中，为什么 sampler2D 变量是个 uniform，我们却不用 glUniform 给它赋值？</p><p>实际上，使用 glUniform1i，我们可以给纹理采样器分配一个位置值，这样的话我们能够在一个片段着色器中设置多个纹理。一个纹理的位置值通常称为一个纹理单元。</p><p>首先，我们可以按上面同样的方式创建 2 个纹理：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> texture1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createTexture</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;static-resources/1.jpeg&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> texture2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createTexture</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;static-resources/2.jpeg&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> texture1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createTexture</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;static-resources/1.jpeg&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> texture2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createTexture</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;static-resources/2.jpeg&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span></code></pre></div><p>然后，我们还需要在渲染前告诉 OpenGL 每个着色器采样器属于哪个纹理单元：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">glUseProgram</span><span style="color:#E1E4E8;">(shaderProgram);</span><span style="color:#6A737D;"> // 不要忘记在设置uniform变量之前激活着色器程序</span></span>
<span class="line"><span style="color:#B392F0;">glUniform1i</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">glGetUniformLocation</span><span style="color:#E1E4E8;">(shaderProgram</span><span style="color:#6A737D;">/* 传入程序的 */</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;texture1&quot;</span><span style="color:#E1E4E8;">), </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">glUniform1i</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">glGetUniformLocation</span><span style="color:#E1E4E8;">(shaderProgram</span><span style="color:#6A737D;">/* 传入程序的 */</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;texture2&quot;</span><span style="color:#E1E4E8;">), </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(...)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#6A737D;">    // ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">glUseProgram</span><span style="color:#24292E;">(shaderProgram);</span><span style="color:#6A737D;"> // 不要忘记在设置uniform变量之前激活着色器程序</span></span>
<span class="line"><span style="color:#6F42C1;">glUniform1i</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">glGetUniformLocation</span><span style="color:#24292E;">(shaderProgram</span><span style="color:#6A737D;">/* 传入程序的 */</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;texture1&quot;</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">glUniform1i</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">glGetUniformLocation</span><span style="color:#24292E;">(shaderProgram</span><span style="color:#6A737D;">/* 传入程序的 */</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;texture2&quot;</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;">(...)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#6A737D;">    // ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>同时，就像 glBindTexture 一样，在绘制时，我们可以使用 glActiveTexture 激活纹理单元，传入我们需要使用的纹理单元：</p><p><em>一个纹理的默认纹理单元是 0，它是默认的激活纹理单元，所以教程上面我们没有分配一个位置值。</em></p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">glActiveTexture</span><span style="color:#E1E4E8;">(GL_TEXTURE0);</span><span style="color:#6A737D;"> // 在绑定纹理之前先激活纹理单元</span></span>
<span class="line"><span style="color:#B392F0;">glBindTexture</span><span style="color:#E1E4E8;">(GL_TEXTURE_2D, texture1);</span></span>
<span class="line"><span style="color:#B392F0;">glActiveTexture</span><span style="color:#E1E4E8;">(GL_TEXTURE1);</span></span>
<span class="line"><span style="color:#B392F0;">glBindTexture</span><span style="color:#E1E4E8;">(GL_TEXTURE_2D, texture2);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">glActiveTexture</span><span style="color:#24292E;">(GL_TEXTURE0);</span><span style="color:#6A737D;"> // 在绑定纹理之前先激活纹理单元</span></span>
<span class="line"><span style="color:#6F42C1;">glBindTexture</span><span style="color:#24292E;">(GL_TEXTURE_2D, texture1);</span></span>
<span class="line"><span style="color:#6F42C1;">glActiveTexture</span><span style="color:#24292E;">(GL_TEXTURE1);</span></span>
<span class="line"><span style="color:#6F42C1;">glBindTexture</span><span style="color:#24292E;">(GL_TEXTURE_2D, texture2);</span></span></code></pre></div><p>此后，我们就可以在分片着色器中获取多个纹理：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::string fragString </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SHADER_STRING</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    #version </span><span style="color:#79B8FF;">330</span><span style="color:#E1E4E8;"> core</span></span>
<span class="line"><span style="color:#E1E4E8;">    ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    uniform sampler2D texture1;</span></span>
<span class="line"><span style="color:#E1E4E8;">    uniform sampler2D texture2;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        FragColor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mix</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">texture</span><span style="color:#E1E4E8;">(texture1, TexCoord), </span><span style="color:#B392F0;">texture</span><span style="color:#E1E4E8;">(texture2, TexCoord), </span><span style="color:#79B8FF;">0.2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::string fragString </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SHADER_STRING</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    #version </span><span style="color:#005CC5;">330</span><span style="color:#24292E;"> core</span></span>
<span class="line"><span style="color:#24292E;">    ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    uniform sampler2D texture1;</span></span>
<span class="line"><span style="color:#24292E;">    uniform sampler2D texture2;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        FragColor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mix</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">texture</span><span style="color:#24292E;">(texture1, TexCoord), </span><span style="color:#6F42C1;">texture</span><span style="color:#24292E;">(texture2, TexCoord), </span><span style="color:#005CC5;">0.2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span></code></pre></div><p>纹理的介绍就先到这了。</p>`,51)]))}const C=n(t,[["render",c]]);export{d as __pageData,C as default};
