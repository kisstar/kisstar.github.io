import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.eecc699f.js";const d=JSON.parse('{"title":"变换","description":"","frontmatter":{},"headers":[],"relativePath":"computer-graphics/transformations.md","filePath":"computer-graphics/transformations.md"}'),p={name:"computer-graphics/transformations.md"},o=l(`<h1 id="变换" tabindex="-1">变换 <a class="header-anchor" href="#变换" aria-label="Permalink to &quot;变换&quot;">​</a></h1><p>要想让静态的物体动起来，我们可以尝试着在每一帧改变物体的顶点并且重配置缓冲区从而使它们移动，但这太繁琐了，而且会消耗很多的处理时间。使用（多个）矩阵对象可以更好的变换一个物体。</p><h2 id="旋转和缩放" tabindex="-1">旋转和缩放 <a class="header-anchor" href="#旋转和缩放" aria-label="Permalink to &quot;旋转和缩放&quot;">​</a></h2><p>让我们来旋转和缩放之前教程中的那个箱子。首先我们把箱子逆时针旋转 90 度。然后缩放 0.5 倍，使它变成原来的一半大。我们先来创建变换矩阵：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;glm/glm.hpp&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;glm/gtc/matrix_transform.hpp&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::mat4 trans;</span></span>
<span class="line"><span style="color:#E1E4E8;">trans </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">rotate</span><span style="color:#E1E4E8;">(trans, </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">radians</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">90.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">), </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vec3</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">trans </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">scale</span><span style="color:#E1E4E8;">(trans, </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vec3</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0.5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.5</span><span style="color:#E1E4E8;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;glm/glm.hpp&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;glm/gtc/matrix_transform.hpp&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::mat4 trans;</span></span>
<span class="line"><span style="color:#24292E;">trans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">rotate</span><span style="color:#24292E;">(trans, </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">radians</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">90.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">), </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vec3</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">trans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">scale</span><span style="color:#24292E;">(trans, </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vec3</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">));</span></span></code></pre></div><p>如何把矩阵传递给着色器？</p><p>GLSL 里也有一个 mat4 类型。所以我们将修改顶点着色器让其接收一个 mat4 的 uniform 变量，然后再用矩阵 uniform 乘以位置向量：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::string vertexString </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SHADER_STRING</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#6A737D;">    // 设定了输入变量的位置值</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">layout</span><span style="color:#E1E4E8;">(location </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) in vec3 aPos;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">layout</span><span style="color:#E1E4E8;">(location </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) in vec3 aColor;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">layout</span><span style="color:#E1E4E8;">(location </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) in vec2 aTexCoord;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    out vec3 ourColor;</span></span>
<span class="line"><span style="color:#E1E4E8;">    out vec2 TexCoord;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    uniform mat4 transform;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        ourColor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> aColor;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        gl_Position </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> transform </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">vec4</span><span style="color:#E1E4E8;">(aPos, </span><span style="color:#79B8FF;">1.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        TexCoord </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">vec2</span><span style="color:#E1E4E8;">(aTexCoord.x, </span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> aTexCoord.y);</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::string vertexString </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SHADER_STRING</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#6A737D;">    // 设定了输入变量的位置值</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">layout</span><span style="color:#24292E;">(location </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) in vec3 aPos;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">layout</span><span style="color:#24292E;">(location </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) in vec3 aColor;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">layout</span><span style="color:#24292E;">(location </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) in vec2 aTexCoord;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    out vec3 ourColor;</span></span>
<span class="line"><span style="color:#24292E;">    out vec2 TexCoord;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    uniform mat4 transform;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        ourColor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> aColor;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        gl_Position </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> transform </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">vec4</span><span style="color:#24292E;">(aPos, </span><span style="color:#005CC5;">1.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        TexCoord </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">vec2</span><span style="color:#24292E;">(aTexCoord.x, </span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> aTexCoord.y);</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span></code></pre></div><p>最后就是把变换矩阵传递给着色器了：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;glm/gtc/type_ptr.hpp&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;glad/glad.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">unsigned</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> transformLoc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">glGetUniformLocation</span><span style="color:#E1E4E8;">(shaderProgram, </span><span style="color:#9ECBFF;">&quot;transform&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">glUniformMatrix4fv</span><span style="color:#E1E4E8;">(transformLoc, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, GL_FALSE, </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">value_ptr</span><span style="color:#E1E4E8;">(trans));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;glm/gtc/type_ptr.hpp&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;glad/glad.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">unsigned</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> transformLoc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">glGetUniformLocation</span><span style="color:#24292E;">(shaderProgram, </span><span style="color:#032F62;">&quot;transform&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">glUniformMatrix4fv</span><span style="color:#24292E;">(transformLoc, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, GL_FALSE, </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">value_ptr</span><span style="color:#24292E;">(trans));</span></span></code></pre></div><h2 id="旋转动画" tabindex="-1">旋转动画 <a class="header-anchor" href="#旋转动画" aria-label="Permalink to &quot;旋转动画&quot;">​</a></h2><p>为了得到动态的效果，我们可以让箱子随着时间旋转，我们将相应的矩阵创建和传递放到一个函数中：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;glm/glm.hpp&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;glm/gtc/matrix_transform.hpp&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;glm/gtc/type_ptr.hpp&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;glad/glad.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">transform</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">shaderProgram</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#6A737D;">    // create transformations</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::mat4 transform </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">mat4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;"> // make sure to initialize matrix to identity matrix first</span></span>
<span class="line"><span style="color:#6A737D;">    // 把箱子放在窗口的右下角</span></span>
<span class="line"><span style="color:#E1E4E8;">    transform </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">translate</span><span style="color:#E1E4E8;">(transform, </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vec3</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0.5</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">0.5</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#6A737D;">    // 使用 GLFW 的时间函数来获取不同时间的角度</span></span>
<span class="line"><span style="color:#E1E4E8;">    transform </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">rotate</span><span style="color:#E1E4E8;">(transform, (</span><span style="color:#F97583;">float</span><span style="color:#E1E4E8;">)</span><span style="color:#B392F0;">glfwGetTime</span><span style="color:#E1E4E8;">(), </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">vec3</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">unsigned</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> transformLoc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">glGetUniformLocation</span><span style="color:#E1E4E8;">(shaderProgram, </span><span style="color:#9ECBFF;">&quot;transform&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">glUniformMatrix4fv</span><span style="color:#E1E4E8;">(transformLoc, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, GL_FALSE, </span><span style="color:#B392F0;">glm</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">value_ptr</span><span style="color:#E1E4E8;">(transform));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;glm/glm.hpp&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;glm/gtc/matrix_transform.hpp&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;glm/gtc/type_ptr.hpp&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;glad/glad.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">transform</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">shaderProgram</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#6A737D;">    // create transformations</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::mat4 transform </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">mat4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">);</span><span style="color:#6A737D;"> // make sure to initialize matrix to identity matrix first</span></span>
<span class="line"><span style="color:#6A737D;">    // 把箱子放在窗口的右下角</span></span>
<span class="line"><span style="color:#24292E;">    transform </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">translate</span><span style="color:#24292E;">(transform, </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vec3</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.5</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0.5</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#6A737D;">    // 使用 GLFW 的时间函数来获取不同时间的角度</span></span>
<span class="line"><span style="color:#24292E;">    transform </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">rotate</span><span style="color:#24292E;">(transform, (</span><span style="color:#D73A49;">float</span><span style="color:#24292E;">)</span><span style="color:#6F42C1;">glfwGetTime</span><span style="color:#24292E;">(), </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">vec3</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">unsigned</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> transformLoc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">glGetUniformLocation</span><span style="color:#24292E;">(shaderProgram, </span><span style="color:#032F62;">&quot;transform&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">glUniformMatrix4fv</span><span style="color:#24292E;">(transformLoc, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, GL_FALSE, </span><span style="color:#6F42C1;">glm</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">value_ptr</span><span style="color:#24292E;">(transform));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>同时更新一下顶点着色器：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::string vertexString </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SHADER_STRING</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#6A737D;">    // 设定了输入变量的位置值</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">layout</span><span style="color:#E1E4E8;">(location </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) in vec3 aPos;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">layout</span><span style="color:#E1E4E8;">(location </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) in vec3 aColor;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">layout</span><span style="color:#E1E4E8;">(location </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) in vec2 aTexCoord;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    out vec3 ourColor;</span></span>
<span class="line"><span style="color:#E1E4E8;">    out vec2 TexCoord;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    uniform mat4 transform;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        ourColor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> aColor;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        gl_Position </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> transform </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">vec4</span><span style="color:#E1E4E8;">(aPos, </span><span style="color:#79B8FF;">1.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        TexCoord </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">vec2</span><span style="color:#E1E4E8;">(aTexCoord.x, aTexCoord.y);</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::string vertexString </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SHADER_STRING</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#6A737D;">    // 设定了输入变量的位置值</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">layout</span><span style="color:#24292E;">(location </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) in vec3 aPos;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">layout</span><span style="color:#24292E;">(location </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) in vec3 aColor;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">layout</span><span style="color:#24292E;">(location </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) in vec2 aTexCoord;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    out vec3 ourColor;</span></span>
<span class="line"><span style="color:#24292E;">    out vec2 TexCoord;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    uniform mat4 transform;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        ourColor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> aColor;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        gl_Position </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> transform </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">vec4</span><span style="color:#24292E;">(aPos, </span><span style="color:#005CC5;">1.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        TexCoord </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">vec2</span><span style="color:#24292E;">(aTexCoord.x, aTexCoord.y);</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span></code></pre></div><p>最后，在渲染中</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#6A737D;">    // ...</span></span>
<span class="line"><span style="color:#6A737D;">    // 渲染循环</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">glfwWindowShouldClose</span><span style="color:#E1E4E8;">(window))</span><span style="color:#6A737D;"> // 检查一次 GLFW 是否被要求退出</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#6A737D;">        // ...</span></span>
<span class="line"><span style="color:#6A737D;">        // 渲染指令</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">glClearColor</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0.2</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.3</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.3</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1.0</span><span style="color:#F97583;">f</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">glClear</span><span style="color:#E1E4E8;">(GL_COLOR_BUFFER_BIT);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">glBindTexture</span><span style="color:#E1E4E8;">(GL_TEXTURE_2D, texture);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">CHECK_GL</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">glUseProgram</span><span style="color:#E1E4E8;">(shaderProgram));</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">transform</span><span style="color:#E1E4E8;">(shaderProgram);</span><span style="color:#6A737D;"> // 调用变换函数以传递矩阵</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">glBindVertexArray</span><span style="color:#E1E4E8;">(VAO);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">glDrawElements</span><span style="color:#E1E4E8;">(GL_TRIANGLES, </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">, GL_UNSIGNED_INT, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">        // ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    // ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#6A737D;">    // ...</span></span>
<span class="line"><span style="color:#6A737D;">    // 渲染循环</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">glfwWindowShouldClose</span><span style="color:#24292E;">(window))</span><span style="color:#6A737D;"> // 检查一次 GLFW 是否被要求退出</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#6A737D;">        // ...</span></span>
<span class="line"><span style="color:#6A737D;">        // 渲染指令</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">glClearColor</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.2</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.3</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.3</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1.0</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">glClear</span><span style="color:#24292E;">(GL_COLOR_BUFFER_BIT);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">glBindTexture</span><span style="color:#24292E;">(GL_TEXTURE_2D, texture);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">CHECK_GL</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">glUseProgram</span><span style="color:#24292E;">(shaderProgram));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">transform</span><span style="color:#24292E;">(shaderProgram);</span><span style="color:#6A737D;"> // 调用变换函数以传递矩阵</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">glBindVertexArray</span><span style="color:#24292E;">(VAO);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">glDrawElements</span><span style="color:#24292E;">(GL_TRIANGLES, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">, GL_UNSIGNED_INT, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">        // ...</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    // ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>现在，并可以看到一个右下角旋转的图像了。</p>`,18),e=[o];function t(c,r,E,y,i,F){return n(),a("div",null,e)}const g=s(p,[["render",t]]);export{d as __pageData,g as default};
