import{_ as t,o as a,c as r,O as n}from"./chunks/framework.97d8791f.js";const u=JSON.parse('{"title":"设计模式","description":"","frontmatter":{},"headers":[],"relativePath":"design-pattern/index.md","filePath":"design-pattern/index.md","lastUpdated":1748150628000}'),i={name:"design-pattern/index.md"};function o(s,e,d,p,l,c){return a(),r("div",null,e[0]||(e[0]=[n('<h1 id="设计模式" tabindex="-1">设计模式 <a class="header-anchor" href="#设计模式" aria-label="Permalink to &quot;设计模式&quot;">​</a></h1><p>在软件工程中，设计模式（design pattern）是对软件设计中普遍存在（反复出现）的各种问题，所提出的解决方案。</p><blockquote><p>每一个模式描述了一个在我们周围不断重复发送的问题，以及该问题的解决方法的核心。这样，你就能一次又一次地使用该方案而不必做重复劳动。 ——来自 Christopher Alexander</p></blockquote><p>设计模式并不直接用来完成代码的编写，而是描述在各种不同情况下，要怎么解决问题的一种方案。</p><p>面向对象设计模式通常以类别或对象来描述其中的关系和相互作用，但不涉及用来完成应用程序的特定类别或对象。</p><p>设计模式能使不稳定依赖于相对稳定、具体依赖于相对抽象，避免会引起麻烦的紧耦合，以增强软件设计面对并适应变化的能力。</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://design-patterns.readthedocs.io/zh-cn/latest/" target="_blank" rel="noreferrer">图说设计模式 — Graphic Design Patterns</a></li></ul>',8)]))}const f=t(i,[["render",o]]);export{u as __pageData,f as default};
