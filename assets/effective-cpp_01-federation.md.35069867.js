import{_ as e,o as t,c as a,Q as i}from"./chunks/framework.55e55ea0.js";const h=JSON.parse('{"title":"视 C++ 为一个语言联邦","description":"","frontmatter":{},"headers":[],"relativePath":"effective-cpp/01-federation.md","filePath":"effective-cpp/01-federation.md","lastUpdated":1709969129000}'),r={name:"effective-cpp/01-federation.md"},o=i('<h1 id="视-c-为一个语言联邦" tabindex="-1">视 C++ 为一个语言联邦 <a class="header-anchor" href="#视-c-为一个语言联邦" aria-label="Permalink to &quot;视 C++ 为一个语言联邦&quot;">​</a></h1><p>C++ 已经是个多重范型编程语言，一个同时支持过程形式、面向对象形式、函数形式、泛型形式、元编程形式的语言。所以，我们该如何理解这样一个语言呢？</p><p>最简单的方法是<strong>将 C++ 视为一个由相关语言组成的联邦而非单一语言。</strong></p><p>在其某个次语言中，各种守则与通例都倾向简单、直观易懂、并且容易记住。</p><ul><li>C</li><li>Object-Oriented C++</li><li>Template C++</li><li>STL</li></ul><p><strong>C++ 高效编程守则视状况而变化，取决于你使用 C++ 的哪一部分。</strong></p><p>例如，在基于 C 语言的程序设计中，基本类型传参时传值比传引用更有效率。然而当你接触 Object-Oriented C++ 时会发现，传常量指针是更好的选择。但是你如果又接触到了 STL，其中的迭代器和函数对象都是基于 C 语言的指针而设计的，此时传值又比传引用更好。</p><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h2><ul><li>将 C++ 视为一个由相关语言组成的联邦而非单一语言。</li><li>C++ 高效编程守则视状况而变化，取决于你使用 C++ 的哪一部分。</li></ul>',9),l=[o];function n(c,s,p,_,d,f){return t(),a("div",null,l)}const u=e(r,[["render",n]]);export{h as __pageData,u as default};
