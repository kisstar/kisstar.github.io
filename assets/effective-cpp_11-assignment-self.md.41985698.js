import{_ as a,o as p,c as n,O as l}from"./chunks/framework.2a7ed5c6.js";const d=JSON.parse('{"title":"在赋值运算符中处理自我赋值","description":"","frontmatter":{},"headers":[],"relativePath":"effective-cpp/11-assignment-self.md","filePath":"effective-cpp/11-assignment-self.md","lastUpdated":1740922265000}'),o={name:"effective-cpp/11-assignment-self.md"};function e(t,s,c,r,y,E){return p(),n("div",null,s[0]||(s[0]=[l(`<h1 id="在赋值运算符中处理自我赋值" tabindex="-1">在赋值运算符中处理自我赋值 <a class="header-anchor" href="#在赋值运算符中处理自我赋值" aria-label="Permalink to &quot;在赋值运算符中处理自我赋值&quot;">​</a></h1><p>自我赋值看起很奇怪，但在 C++ 中，它是合法的并且有时候不易被发现：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">a[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a[j];</span></span>
<span class="line"><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">p1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">p2;</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doSomething</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Base</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">rb</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Derived</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">pd</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;"> // rb 和 *pd 也有可能其实是同一对象</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">a[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a[j];</span></span>
<span class="line"><span style="color:#D73A49;">*</span><span style="color:#24292E;">p1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p2;</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doSomething</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Base</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">rb</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Derived</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">pd</span><span style="color:#24292E;">);</span><span style="color:#6A737D;"> // rb 和 *pd 也有可能其实是同一对象</span></span></code></pre></div><p>有时候自我赋值甚至是不安全的：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Widget</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#B392F0;">Widget</span><span style="color:#E1E4E8;">::</span><span style="color:#F97583;">operator</span><span style="color:#B392F0;">=</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Widget</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">rhs</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">delete</span><span style="color:#E1E4E8;"> pb;</span><span style="color:#6A737D;">                // stop using current bitmap</span></span>
<span class="line"><span style="color:#E1E4E8;">    pb </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Bitmap</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">rhs.pb);</span><span style="color:#6A737D;"> // start using a copy of rhs&#39;s bitmap</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;">             // see Item 10</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Widget</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#6F42C1;">Widget</span><span style="color:#24292E;">::</span><span style="color:#D73A49;">operator</span><span style="color:#6F42C1;">=</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Widget</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">rhs</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">delete</span><span style="color:#24292E;"> pb;</span><span style="color:#6A737D;">                // stop using current bitmap</span></span>
<span class="line"><span style="color:#24292E;">    pb </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Bitmap</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">rhs.pb);</span><span style="color:#6A737D;"> // start using a copy of rhs&#39;s bitmap</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span><span style="color:#6A737D;">             // see Item 10</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其中，如果 <code>this == &amp;rhs</code>（指向同一个对象），就会导致将 pb 指向了一个已经被删除对象。</p><p>一个简单的解决办法是，在赋值函数中先判断一下是否是同一个对象：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Widget</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#B392F0;">Widget</span><span style="color:#E1E4E8;">::</span><span style="color:#F97583;">operator</span><span style="color:#B392F0;">=</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Widget</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">rhs</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">rhs)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">delete</span><span style="color:#E1E4E8;"> pb;</span><span style="color:#6A737D;">                // stop using current bitmap</span></span>
<span class="line"><span style="color:#E1E4E8;">    pb </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Bitmap</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">rhs.pb);</span><span style="color:#6A737D;"> // start using a copy of rhs&#39;s bitmap</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;">             // see Item 10</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Widget</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#6F42C1;">Widget</span><span style="color:#24292E;">::</span><span style="color:#D73A49;">operator</span><span style="color:#6F42C1;">=</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Widget</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">rhs</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">rhs)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">delete</span><span style="color:#24292E;"> pb;</span><span style="color:#6A737D;">                // stop using current bitmap</span></span>
<span class="line"><span style="color:#24292E;">    pb </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Bitmap</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">rhs.pb);</span><span style="color:#6A737D;"> // start using a copy of rhs&#39;s bitmap</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span><span style="color:#6A737D;">             // see Item 10</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>不过，如果 Bitmap 在创建的过程中发生错误，那么 pb 仍然会指向一个无效的 Bitmap 对象。</p><p>好在通常排列语句顺序可以达到异常安全，比如我们先创建 Bitmap 对象，然后将其指针赋值给 pb，最后再删除原来的 Bitmap：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Widget</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Widget</span><span style="color:#E1E4E8;">::</span><span style="color:#F97583;">operator</span><span style="color:#B392F0;">=</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Widget</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">rhs</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    Bitmap </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">pOrig </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pb;</span><span style="color:#6A737D;">               // remember original pb</span></span>
<span class="line"><span style="color:#E1E4E8;">    pb </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Bitmap</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">rhs.pb);</span><span style="color:#6A737D;">         // make pb point to a copy of *pb</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">delete</span><span style="color:#E1E4E8;"> pOrig;</span><span style="color:#6A737D;">                     // delete the original pb</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Widget</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Widget</span><span style="color:#24292E;">::</span><span style="color:#D73A49;">operator</span><span style="color:#6F42C1;">=</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Widget</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">rhs</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    Bitmap </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">pOrig </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pb;</span><span style="color:#6A737D;">               // remember original pb</span></span>
<span class="line"><span style="color:#24292E;">    pb </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Bitmap</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">rhs.pb);</span><span style="color:#6A737D;">         // make pb point to a copy of *pb</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">delete</span><span style="color:#24292E;"> pOrig;</span><span style="color:#6A737D;">                     // delete the original pb</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 operator= 函数内手工排列语句（确保代码不但“异常安全”而且“自我赋值安全”）的一个替代方案是，使用所谓的 copy and swap 技术：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Widget</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Widget</span><span style="color:#E1E4E8;">::</span><span style="color:#F97583;">operator</span><span style="color:#B392F0;">=</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Widget</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">rhs</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">swap</span><span style="color:#E1E4E8;">(rhs);</span><span style="color:#6A737D;">                // swap *this&#39;s data with</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;">             // the copy&#39;s</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Widget</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Widget</span><span style="color:#24292E;">::</span><span style="color:#D73A49;">operator</span><span style="color:#6F42C1;">=</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Widget</span><span style="color:#24292E;"> </span><span style="color:#E36209;">rhs</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">swap</span><span style="color:#24292E;">(rhs);</span><span style="color:#6A737D;">                // swap *this&#39;s data with</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span><span style="color:#6A737D;">             // the copy&#39;s</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><em>如何实现异常安全的 swap 可以参考 29 条款。</em></p><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h2><ul><li>确保当对象自我赋值时 operator= 有良好行为。其中技术包括比较“来源对象”和“目标对象”的地址、精心周到的语句顺序、以及 copy-and-swap。</li><li>确定任何函数如果操作一个以上的对象，而其中多个对象是同一个对象时，其行为仍然正确。</li></ul>`,16)]))}const F=a(o,[["render",e]]);export{d as __pageData,F as default};
