import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.eecc699f.js";const u=JSON.parse('{"title":"完整拷贝对象","description":"","frontmatter":{},"headers":[],"relativePath":"effective-cpp/12-copy-object.md","filePath":"effective-cpp/12-copy-object.md"}'),l={name:"effective-cpp/12-copy-object.md"},o=p(`<h1 id="完整拷贝对象" tabindex="-1">完整拷贝对象 <a class="header-anchor" href="#完整拷贝对象" aria-label="Permalink to &quot;完整拷贝对象&quot;">​</a></h1><p>负责拷贝对象的函数包括复制构造函数和赋值运算符（以下统称为拷贝函数），编译器提供的版本会将对象中的所有成员都做一份拷贝。</p><p>下面是自己实现的复制构造函数和赋值运算符：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Customer</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    string name;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Customer</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Customer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">rhs</span><span style="color:#E1E4E8;">) : </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(rhs.name) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Customer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;operator</span><span style="color:#B392F0;">=</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Customer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">rhs</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> rhs.name;</span><span style="color:#6A737D;"> // copy rhs&#39;s data</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;">    // see Item 10</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Customer</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    string name;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Customer</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Customer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">rhs</span><span style="color:#24292E;">) : </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(rhs.name) {}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Customer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;operator</span><span style="color:#6F42C1;">=</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Customer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">rhs</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> rhs.name;</span><span style="color:#6A737D;"> // copy rhs&#39;s data</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span><span style="color:#6A737D;">    // see Item 10</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>目前，它工作得很好，假设某一天我们新增了一个数据成员，但是忘记了更新拷贝函数：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Customer</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    string name;</span></span>
<span class="line"><span style="color:#E1E4E8;">    Date lastTransaction;</span></span>
<span class="line"><span style="color:#6A737D;">    // ...</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Customer</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    string name;</span></span>
<span class="line"><span style="color:#24292E;">    Date lastTransaction;</span></span>
<span class="line"><span style="color:#6A737D;">    // ...</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>此时，在拷贝函数中执行的就是部分拷贝，如果牵扯到继承时，问题将会变得更不易察觉：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PriorityCustomer</span><span style="color:#E1E4E8;"> : </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Customer</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> priority;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">PriorityCustomer</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PriorityCustomer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">rhs</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        : </span><span style="color:#B392F0;">priority</span><span style="color:#E1E4E8;">(rhs.priority) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    PriorityCustomer </span><span style="color:#F97583;">&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">operator</span><span style="color:#B392F0;">=</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PriorityCustomer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">rhs</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        priority </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> rhs.priority;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PriorityCustomer</span><span style="color:#24292E;"> : </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Customer</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> priority;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">PriorityCustomer</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PriorityCustomer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">rhs</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        : </span><span style="color:#6F42C1;">priority</span><span style="color:#24292E;">(rhs.priority) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    PriorityCustomer </span><span style="color:#D73A49;">&amp;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">operator</span><span style="color:#6F42C1;">=</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PriorityCustomer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">rhs</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        priority </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> rhs.priority;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>在上面的示例中，看起来我们似乎复制了 PriorityCustomer 类中所有的数据成员，但实际上我们遗忘了基类中的数据成员。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PriorityCustomer</span><span style="color:#E1E4E8;"> : </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Customer</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> priority;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">PriorityCustomer</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PriorityCustomer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">rhs</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        : </span><span style="color:#B392F0;">Customer</span><span style="color:#E1E4E8;">(rhs)</span><span style="color:#6A737D;"> /* 调用 base class 的 copy 构造函数 */</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">priority</span><span style="color:#E1E4E8;">(rhs.priority) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    PriorityCustomer </span><span style="color:#F97583;">&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">operator</span><span style="color:#B392F0;">=</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PriorityCustomer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">rhs</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">Customer</span><span style="color:#E1E4E8;">::operator</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">(rhs);</span><span style="color:#6A737D;"> // 对 base class 的部分进行赋值</span></span>
<span class="line"><span style="color:#E1E4E8;">        priority </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> rhs.priority;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PriorityCustomer</span><span style="color:#24292E;"> : </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Customer</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> priority;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">PriorityCustomer</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PriorityCustomer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">rhs</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        : </span><span style="color:#6F42C1;">Customer</span><span style="color:#24292E;">(rhs)</span><span style="color:#6A737D;"> /* 调用 base class 的 copy 构造函数 */</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">priority</span><span style="color:#24292E;">(rhs.priority) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    PriorityCustomer </span><span style="color:#D73A49;">&amp;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">operator</span><span style="color:#6F42C1;">=</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PriorityCustomer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">rhs</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">Customer</span><span style="color:#24292E;">::operator</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">(rhs);</span><span style="color:#6A737D;"> // 对 base class 的部分进行赋值</span></span>
<span class="line"><span style="color:#24292E;">        priority </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> rhs.priority;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>你可能注意到了复制构造函数和赋值运算符中的代码重复，请不要试图在两者之间相互调用来避免代码重复。正确的做法是建立一个新的成员函数给两者调用。这样的函数往往是 private 的，而且常被命名为 init。</p><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h2><ul><li>Copying 函数应该确保复制“对象内的所有成员变量”及“所有 base class 成分”。</li><li>不要尝试以某个 copying 函数实现另一个 copying 函数。应该将共同机能放进第三个函数中，并由两个 coping 函数共同调用。</li></ul>`,13),e=[o];function r(c,t,y,E,i,F){return n(),a("div",null,e)}const C=s(l,[["render",r]]);export{u as __pageData,C as default};
